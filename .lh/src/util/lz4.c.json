{
    "sourceFile": "src/util/lz4.c",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733456011105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733462960368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3228,52 +3228,5 @@\n     /* avoid const char * -> char * conversion warning */\n     return (char *)(uptrval)((LZ4_stream_t *)state)->internal_donotuse.dictionary;\n }\n \n-void CompressLargeFile(const std::string &inputFilePath, const std::string &outputFilePath, int blockSize)\n-{\n-    // 打开输入文件\n-    std::ifstream inputFile(inputFilePath, std::ios::binary);\n-    if (!inputFile.is_open())\n-    {\n-        std::cerr << \"Unable to open input file: \" << inputFilePath << std::endl;\n-        return;\n-    }\n-\n-    // 打开输出文件\n-    std::ofstream outputFile(outputFilePath, std::ios::binary);\n-    if (!outputFile.is_open())\n-    {\n-        std::cerr << \"Unable to open output file: \" << outputFilePath << std::endl;\n-        return;\n-    }\n-\n-    std::vector<char> inputBuffer(blockSize);\n-    std::vector<char> compressedBuffer(LZ4_compressBound(blockSize));\n-\n-    while (inputFile)\n-    {\n-        // 读取一个块\n-        inputFile.read(inputBuffer.data(), blockSize);\n-        std::streamsize bytesRead = inputFile.gcount();\n-        if (bytesRead == 0)\n-            break;\n-\n-        // 压缩块\n-        int compressedSize = LZ4_compress_fast(inputBuffer.data(), compressedBuffer.data(), bytesRead, compressedBuffer.size(), 1);\n-        if (compressedSize <= 0)\n-        {\n-            std::cerr << \"Compression failed\" << std::endl;\n-            return;\n-        }\n-\n-        // 写入压缩块大小\n-        outputFile.write(reinterpret_cast<const char *>(&compressedSize), sizeof(compressedSize));\n-        // 写入压缩数据\n-        outputFile.write(compressedBuffer.data(), compressedSize);\n-    }\n-\n-    inputFile.close();\n-    outputFile.close();\n-}\n-\n #endif /* LZ4_COMMONDEFS_ONLY */\n"
                }
            ],
            "date": 1733456011105,
            "name": "Commit-0",
            "content": "/*\n   LZ4 - Fast LZ compression algorithm\n   Copyright (C) 2011-2020, Yann Collet.\n\n   BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions are\n   met:\n\n       * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n       * Redistributions in binary form must reproduce the above\n   copyright notice, this list of conditions and the following disclaimer\n   in the documentation and/or other materials provided with the\n   distribution.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n   You can contact the author at :\n    - LZ4 homepage : http://www.lz4.org\n    - LZ4 source repository : https://github.com/lz4/lz4\n*/\n\n/*-************************************\n *  Tuning parameters\n **************************************/\n/*\n * LZ4_HEAPMODE :\n * Select how default compression functions will allocate memory for their hash table,\n * in memory stack (0:default, fastest), or in memory heap (1:requires malloc()).\n */\n#ifndef LZ4_HEAPMODE\n#define LZ4_HEAPMODE 0\n#endif\n\n/*\n * LZ4_ACCELERATION_DEFAULT :\n * Select \"acceleration\" for LZ4_compress_fast() when parameter value <= 0\n */\n#define LZ4_ACCELERATION_DEFAULT 1\n/*\n * LZ4_ACCELERATION_MAX :\n * Any \"acceleration\" value higher than this threshold\n * get treated as LZ4_ACCELERATION_MAX instead (fix #876)\n */\n#define LZ4_ACCELERATION_MAX 65537\n\n/*-************************************\n *  CPU Feature Detection\n **************************************/\n/* LZ4_FORCE_MEMORY_ACCESS\n * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.\n * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.\n * The below switch allow to select different access method for improved performance.\n * Method 0 (default) : use `memcpy()`. Safe and portable.\n * Method 1 : `__packed` statement. It depends on compiler extension (ie, not portable).\n *            This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.\n * Method 2 : direct access. This method is portable but violate C standard.\n *            It can generate buggy code on targets which assembly generation depends on alignment.\n *            But in some circumstances, it's the only known way to get the most performance (ie GCC + ARMv6)\n * See https://fastcompression.blogspot.fr/2015/08/accessing-unaligned-memory.html for details.\n * Prefer these methods in priority order (0 > 1 > 2)\n */\n#ifndef LZ4_FORCE_MEMORY_ACCESS /* can be defined externally */\n#if defined(__GNUC__) && \\\n    (defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__))\n#define LZ4_FORCE_MEMORY_ACCESS 2\n#elif (defined(__INTEL_COMPILER) && !defined(_WIN32)) || defined(__GNUC__)\n#define LZ4_FORCE_MEMORY_ACCESS 1\n#endif\n#endif\n\n/*\n * LZ4_FORCE_SW_BITCOUNT\n * Define this parameter if your target system or compiler does not support hardware bit count\n */\n#if defined(_MSC_VER) && defined(_WIN32_WCE) /* Visual Studio for WinCE doesn't support Hardware bit count */\n#undef LZ4_FORCE_SW_BITCOUNT                 /* avoid double def */\n#define LZ4_FORCE_SW_BITCOUNT\n#endif\n\n/*-************************************\n *  Dependency\n **************************************/\n/*\n * LZ4_SRC_INCLUDED:\n * Amalgamation flag, whether lz4.c is included\n */\n#ifndef LZ4_SRC_INCLUDED\n#define LZ4_SRC_INCLUDED 1\n#endif\n\n#ifndef LZ4_STATIC_LINKING_ONLY\n#define LZ4_STATIC_LINKING_ONLY\n#endif\n\n#ifndef LZ4_DISABLE_DEPRECATE_WARNINGS\n#define LZ4_DISABLE_DEPRECATE_WARNINGS /* due to LZ4_decompress_safe_withPrefix64k */\n#endif\n\n#define LZ4_STATIC_LINKING_ONLY /* LZ4_DISTANCE_MAX */\n#include \"../../include/lz4.h\"\n/* see also \"memory routines\" below */\n\n/*-************************************\n *  Compiler Options\n **************************************/\n#if defined(_MSC_VER) && (_MSC_VER >= 1400) /* Visual Studio 2005+ */\n#include <intrin.h>                         /* only present in VS2005+ */\n#pragma warning(disable : 4127)             /* disable: C4127: conditional expression is constant */\n#endif                                      /* _MSC_VER */\n\n#ifndef LZ4_FORCE_INLINE\n#ifdef _MSC_VER /* Visual Studio */\n#define LZ4_FORCE_INLINE static __forceinline\n#else\n#if defined(__cplusplus) || defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L /* C99 */\n#ifdef __GNUC__\n#define LZ4_FORCE_INLINE static inline __attribute__((always_inline))\n#else\n#define LZ4_FORCE_INLINE static inline\n#endif\n#else\n#define LZ4_FORCE_INLINE static\n#endif /* __STDC_VERSION__ */\n#endif /* _MSC_VER */\n#endif /* LZ4_FORCE_INLINE */\n\n/* LZ4_FORCE_O2 and LZ4_FORCE_INLINE\n * gcc on ppc64le generates an unrolled SIMDized loop for LZ4_wildCopy8,\n * together with a simple 8-byte copy loop as a fall-back path.\n * However, this optimization hurts the decompression speed by >30%,\n * because the execution does not go to the optimized loop\n * for typical compressible data, and all of the preamble checks\n * before going to the fall-back path become useless overhead.\n * This optimization happens only with the -O3 flag, and -O2 generates\n * a simple 8-byte copy loop.\n * With gcc on ppc64le, all of the LZ4_decompress_* and LZ4_wildCopy8\n * functions are annotated with __attribute__((optimize(\"O2\"))),\n * and also LZ4_wildCopy8 is forcibly inlined, so that the O2 attribute\n * of LZ4_wildCopy8 does not affect the compression speed.\n */\n#if defined(__PPC64__) && defined(__LITTLE_ENDIAN__) && defined(__GNUC__) && !defined(__clang__)\n#define LZ4_FORCE_O2 __attribute__((optimize(\"O2\")))\n#undef LZ4_FORCE_INLINE\n#define LZ4_FORCE_INLINE static __inline __attribute__((optimize(\"O2\"), always_inline))\n#else\n#define LZ4_FORCE_O2\n#endif\n\n#if (defined(__GNUC__) && (__GNUC__ >= 3)) || (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 800)) || defined(__clang__)\n#define expect(expr, value) (__builtin_expect((expr), (value)))\n#else\n#define expect(expr, value) (expr)\n#endif\n\n#ifndef likely\n#define likely(expr) expect((expr) != 0, 1)\n#endif\n#ifndef unlikely\n#define unlikely(expr) expect((expr) != 0, 0)\n#endif\n\n/* Should the alignment test prove unreliable, for some reason,\n * it can be disabled by setting LZ4_ALIGN_TEST to 0 */\n#ifndef LZ4_ALIGN_TEST /* can be externally provided */\n#define LZ4_ALIGN_TEST 1\n#endif\n\n/*-************************************\n *  Memory routines\n **************************************/\n#ifdef LZ4_USER_MEMORY_FUNCTIONS\n/* memory management functions can be customized by user project.\n * Below functions must exist somewhere in the Project\n * and be available at link time */\nvoid *LZ4_malloc(size_t s);\nvoid *LZ4_calloc(size_t n, size_t s);\nvoid LZ4_free(void *p);\n#define ALLOC(s) LZ4_malloc(s)\n#define ALLOC_AND_ZERO(s) LZ4_calloc(1, s)\n#define FREEMEM(p) LZ4_free(p)\n#else\n#include <stdlib.h> /* malloc, calloc, free */\n#define ALLOC(s) malloc(s)\n#define ALLOC_AND_ZERO(s) calloc(1, s)\n#define FREEMEM(p) free(p)\n#endif\n\n#include <string.h> /* memset, memcpy */\n#define MEM_INIT(p, v, s) memset((p), (v), (s))\n\n/*-************************************\n *  Common Constants\n **************************************/\n#define MINMATCH 4\n\n#define WILDCOPYLENGTH 8\n#define LASTLITERALS 5                                             /* see ../doc/lz4_Block_format.md#parsing-restrictions */\n#define MFLIMIT 12                                                 /* see ../doc/lz4_Block_format.md#parsing-restrictions */\n#define MATCH_SAFEGUARD_DISTANCE ((2 * WILDCOPYLENGTH) - MINMATCH) /* ensure it's possible to write 2 x wildcopyLength without overflowing output buffer */\n#define FASTLOOP_SAFE_DISTANCE 64\nstatic const int LZ4_minLength = (MFLIMIT + 1);\n\n#define KB *(1 << 10)\n#define MB *(1 << 20)\n#define GB *(1U << 30)\n\n#define LZ4_DISTANCE_ABSOLUTE_MAX 65535\n#if (LZ4_DISTANCE_MAX > LZ4_DISTANCE_ABSOLUTE_MAX) /* max supported by LZ4 format */\n#error \"LZ4_DISTANCE_MAX is too big : must be <= 65535\"\n#endif\n\n#define ML_BITS 4\n#define ML_MASK ((1U << ML_BITS) - 1)\n#define RUN_BITS (8 - ML_BITS)\n#define RUN_MASK ((1U << RUN_BITS) - 1)\n\n/*-************************************\n *  Error detection\n **************************************/\n#if defined(LZ4_DEBUG) && (LZ4_DEBUG >= 1)\n#include <assert.h>\n#else\n#ifndef assert\n#define assert(condition) ((void)0)\n#endif\n#endif\n\n#define LZ4_STATIC_ASSERT(c)                     \\\n    {                                            \\\n        enum                                     \\\n        {                                        \\\n            LZ4_static_assert = 1 / (int)(!!(c)) \\\n        };                                       \\\n    } /* use after variable declarations */\n\n#if defined(LZ4_DEBUG) && (LZ4_DEBUG >= 2)\n#include <stdio.h>\nstatic int g_debuglog_enable = 1;\n#define DEBUGLOG(l, ...)                             \\\n    {                                                \\\n        if ((g_debuglog_enable) && (l <= LZ4_DEBUG)) \\\n        {                                            \\\n            fprintf(stderr, __FILE__ \": \");          \\\n            fprintf(stderr, __VA_ARGS__);            \\\n            fprintf(stderr, \" \\n\");                  \\\n        }                                            \\\n    }\n#else\n#define DEBUGLOG(l, ...) \\\n    {                    \\\n    } /* disabled */\n#endif\n\nstatic int LZ4_isAligned(const void *ptr, size_t alignment)\n{\n    return ((size_t)ptr & (alignment - 1)) == 0;\n}\n\n/*-************************************\n *  Types\n **************************************/\n#include <limits.h>\n#if defined(__cplusplus) || (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 */)\n#include <stdint.h>\ntypedef uint8_t BYTE;\ntypedef uint16_t U16;\ntypedef uint32_t U32;\ntypedef int32_t S32;\ntypedef uint64_t U64;\ntypedef uintptr_t uptrval;\n#else\n#if UINT_MAX != 4294967295UL\n#error \"LZ4 code (when not C++ or C99) assumes that sizeof(int) == 4\"\n#endif\ntypedef unsigned char BYTE;\ntypedef unsigned short U16;\ntypedef unsigned int U32;\ntypedef signed int S32;\ntypedef unsigned long long U64;\ntypedef size_t uptrval; /* generally true, except OpenVMS-64 */\n#endif\n\n#if defined(__x86_64__)\ntypedef U64 reg_t; /* 64-bits in x32 mode */\n#else\ntypedef size_t reg_t; /* 32-bits in x32 mode */\n#endif\n\ntypedef enum\n{\n    notLimited = 0,\n    limitedOutput = 1,\n    fillOutput = 2\n} limitedOutput_directive;\n\n/*-************************************\n *  Reading and writing into memory\n **************************************/\n\n/**\n * LZ4 relies on memcpy with a constant size being inlined. In freestanding\n * environments, the compiler can't assume the implementation of memcpy() is\n * standard compliant, so it can't apply its specialized memcpy() inlining\n * logic. When possible, use __builtin_memcpy() to tell the compiler to analyze\n * memcpy() as if it were standard compliant, so it can inline it in freestanding\n * environments. This is needed when decompressing the Linux Kernel, for example.\n */\n#if defined(__GNUC__) && (__GNUC__ >= 4)\n#define LZ4_memcpy(dst, src, size) __builtin_memcpy(dst, src, size)\n#else\n#define LZ4_memcpy(dst, src, size) memcpy(dst, src, size)\n#endif\n\nstatic unsigned LZ4_isLittleEndian(void)\n{\n    const union\n    {\n        U32 u;\n        BYTE c[4];\n    } one = {1}; /* don't use static : performance detrimental */\n    return one.c[0];\n}\n\n#if defined(LZ4_FORCE_MEMORY_ACCESS) && (LZ4_FORCE_MEMORY_ACCESS == 2)\n/* lie to the compiler about data alignment; use with caution */\n\nstatic U16 LZ4_read16(const void *memPtr) { return *(const U16 *)memPtr; }\nstatic U32 LZ4_read32(const void *memPtr) { return *(const U32 *)memPtr; }\nstatic reg_t LZ4_read_ARCH(const void *memPtr) { return *(const reg_t *)memPtr; }\n\nstatic void LZ4_write16(void *memPtr, U16 value) { *(U16 *)memPtr = value; }\nstatic void LZ4_write32(void *memPtr, U32 value) { *(U32 *)memPtr = value; }\n\n#elif defined(LZ4_FORCE_MEMORY_ACCESS) && (LZ4_FORCE_MEMORY_ACCESS == 1)\n\n/* __pack instructions are safer, but compiler specific, hence potentially problematic for some compilers */\n/* currently only defined for gcc and icc */\ntypedef union\n{\n    U16 u16;\n    U32 u32;\n    reg_t uArch;\n} __attribute__((packed)) LZ4_unalign;\n\nstatic U16 LZ4_read16(const void *ptr) { return ((const LZ4_unalign *)ptr)->u16; }\nstatic U32 LZ4_read32(const void *ptr) { return ((const LZ4_unalign *)ptr)->u32; }\nstatic reg_t LZ4_read_ARCH(const void *ptr) { return ((const LZ4_unalign *)ptr)->uArch; }\n\nstatic void LZ4_write16(void *memPtr, U16 value) { ((LZ4_unalign *)memPtr)->u16 = value; }\nstatic void LZ4_write32(void *memPtr, U32 value) { ((LZ4_unalign *)memPtr)->u32 = value; }\n\n#else /* safe and portable access using memcpy() */\n\nstatic U16 LZ4_read16(const void *memPtr)\n{\n    U16 val;\n    LZ4_memcpy(&val, memPtr, sizeof(val));\n    return val;\n}\n\nstatic U32 LZ4_read32(const void *memPtr)\n{\n    U32 val;\n    LZ4_memcpy(&val, memPtr, sizeof(val));\n    return val;\n}\n\nstatic reg_t LZ4_read_ARCH(const void *memPtr)\n{\n    reg_t val;\n    LZ4_memcpy(&val, memPtr, sizeof(val));\n    return val;\n}\n\nstatic void LZ4_write16(void *memPtr, U16 value)\n{\n    LZ4_memcpy(memPtr, &value, sizeof(value));\n}\n\nstatic void LZ4_write32(void *memPtr, U32 value)\n{\n    LZ4_memcpy(memPtr, &value, sizeof(value));\n}\n\n#endif /* LZ4_FORCE_MEMORY_ACCESS */\n\nstatic U16 LZ4_readLE16(const void *memPtr)\n{\n    if (LZ4_isLittleEndian())\n    {\n        return LZ4_read16(memPtr);\n    }\n    else\n    {\n        const BYTE *p = (const BYTE *)memPtr;\n        return (U16)((U16)p[0] + (p[1] << 8));\n    }\n}\n\nstatic void LZ4_writeLE16(void *memPtr, U16 value)\n{\n    if (LZ4_isLittleEndian())\n    {\n        LZ4_write16(memPtr, value);\n    }\n    else\n    {\n        BYTE *p = (BYTE *)memPtr;\n        p[0] = (BYTE)value;\n        p[1] = (BYTE)(value >> 8);\n    }\n}\n\n/* customized variant of memcpy, which can overwrite up to 8 bytes beyond dstEnd */\nLZ4_FORCE_INLINE\nvoid LZ4_wildCopy8(void *dstPtr, const void *srcPtr, void *dstEnd)\n{\n    BYTE *d = (BYTE *)dstPtr;\n    const BYTE *s = (const BYTE *)srcPtr;\n    BYTE *const e = (BYTE *)dstEnd;\n\n    do\n    {\n        LZ4_memcpy(d, s, 8);\n        d += 8;\n        s += 8;\n    } while (d < e);\n}\n\nstatic const unsigned inc32table[8] = {0, 1, 2, 1, 0, 4, 4, 4};\nstatic const int dec64table[8] = {0, 0, 0, -1, -4, 1, 2, 3};\n\n#ifndef LZ4_FAST_DEC_LOOP\n#if defined __i386__ || defined _M_IX86 || defined __x86_64__ || defined _M_X64\n#define LZ4_FAST_DEC_LOOP 1\n#elif defined(__aarch64__) && defined(__APPLE__)\n#define LZ4_FAST_DEC_LOOP 1\n#elif defined(__aarch64__) && !defined(__clang__)\n/* On non-Apple aarch64, we disable this optimization for clang because\n * on certain mobile chipsets, performance is reduced with clang. For\n * more information refer to https://github.com/lz4/lz4/pull/707 */\n#define LZ4_FAST_DEC_LOOP 1\n#else\n#define LZ4_FAST_DEC_LOOP 0\n#endif\n#endif\n\n#if LZ4_FAST_DEC_LOOP\n\nLZ4_FORCE_INLINE void\nLZ4_memcpy_using_offset_base(BYTE *dstPtr, const BYTE *srcPtr, BYTE *dstEnd, const size_t offset)\n{\n    assert(srcPtr + offset == dstPtr);\n    if (offset < 8)\n    {\n        LZ4_write32(dstPtr, 0); /* silence an msan warning when offset==0 */\n        dstPtr[0] = srcPtr[0];\n        dstPtr[1] = srcPtr[1];\n        dstPtr[2] = srcPtr[2];\n        dstPtr[3] = srcPtr[3];\n        srcPtr += inc32table[offset];\n        LZ4_memcpy(dstPtr + 4, srcPtr, 4);\n        srcPtr -= dec64table[offset];\n        dstPtr += 8;\n    }\n    else\n    {\n        LZ4_memcpy(dstPtr, srcPtr, 8);\n        dstPtr += 8;\n        srcPtr += 8;\n    }\n\n    LZ4_wildCopy8(dstPtr, srcPtr, dstEnd);\n}\n\n/* customized variant of memcpy, which can overwrite up to 32 bytes beyond dstEnd\n * this version copies two times 16 bytes (instead of one time 32 bytes)\n * because it must be compatible with offsets >= 16. */\nLZ4_FORCE_INLINE void\nLZ4_wildCopy32(void *dstPtr, const void *srcPtr, void *dstEnd)\n{\n    BYTE *d = (BYTE *)dstPtr;\n    const BYTE *s = (const BYTE *)srcPtr;\n    BYTE *const e = (BYTE *)dstEnd;\n\n    do\n    {\n        LZ4_memcpy(d, s, 16);\n        LZ4_memcpy(d + 16, s + 16, 16);\n        d += 32;\n        s += 32;\n    } while (d < e);\n}\n\n/* LZ4_memcpy_using_offset()  presumes :\n * - dstEnd >= dstPtr + MINMATCH\n * - there is at least 8 bytes available to write after dstEnd */\nLZ4_FORCE_INLINE void\nLZ4_memcpy_using_offset(BYTE *dstPtr, const BYTE *srcPtr, BYTE *dstEnd, const size_t offset)\n{\n    BYTE v[8];\n\n    assert(dstEnd >= dstPtr + MINMATCH);\n\n    switch (offset)\n    {\n    case 1:\n        MEM_INIT(v, *srcPtr, 8);\n        break;\n    case 2:\n        LZ4_memcpy(v, srcPtr, 2);\n        LZ4_memcpy(&v[2], srcPtr, 2);\n        LZ4_memcpy(&v[4], v, 4);\n        break;\n    case 4:\n        LZ4_memcpy(v, srcPtr, 4);\n        LZ4_memcpy(&v[4], srcPtr, 4);\n        break;\n    default:\n        LZ4_memcpy_using_offset_base(dstPtr, srcPtr, dstEnd, offset);\n        return;\n    }\n\n    LZ4_memcpy(dstPtr, v, 8);\n    dstPtr += 8;\n    while (dstPtr < dstEnd)\n    {\n        LZ4_memcpy(dstPtr, v, 8);\n        dstPtr += 8;\n    }\n}\n#endif\n\n/*-************************************\n *  Common functions\n **************************************/\nstatic unsigned LZ4_NbCommonBytes(reg_t val)\n{\n    assert(val != 0);\n    if (LZ4_isLittleEndian())\n    {\n        if (sizeof(val) == 8)\n        {\n#if defined(_MSC_VER) && (_MSC_VER >= 1800) && (defined(_M_AMD64) && !defined(_M_ARM64EC)) && !defined(LZ4_FORCE_SW_BITCOUNT)\n/*-*************************************************************************************************\n * ARM64EC is a Microsoft-designed ARM64 ABI compatible with AMD64 applications on ARM64 Windows 11.\n * The ARM64EC ABI does not support AVX/AVX2/AVX512 instructions, nor their relevant intrinsics\n * including _tzcnt_u64. Therefore, we need to neuter the _tzcnt_u64 code path for ARM64EC.\n ****************************************************************************************************/\n#if defined(__clang__) && (__clang_major__ < 10)\n            /* Avoid undefined clang-cl intrinics issue.\n             * See https://github.com/lz4/lz4/pull/1017 for details. */\n            return (unsigned)__builtin_ia32_tzcnt_u64(val) >> 3;\n#else\n            /* x64 CPUS without BMI support interpret `TZCNT` as `REP BSF` */\n            return (unsigned)_tzcnt_u64(val) >> 3;\n#endif\n#elif defined(_MSC_VER) && defined(_WIN64) && !defined(LZ4_FORCE_SW_BITCOUNT)\n            unsigned long r = 0;\n            _BitScanForward64(&r, (U64)val);\n            return (unsigned)r >> 3;\n#elif (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) ||                                \\\n                                                    ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \\\n    !defined(LZ4_FORCE_SW_BITCOUNT)\n            return (unsigned)__builtin_ctzll((U64)val) >> 3;\n#else\n            const U64 m = 0x0101010101010101ULL;\n            val ^= val - 1;\n            return (unsigned)(((U64)((val & (m - 1)) * m)) >> 56);\n#endif\n        }\n        else /* 32 bits */\n        {\n#if defined(_MSC_VER) && (_MSC_VER >= 1400) && !defined(LZ4_FORCE_SW_BITCOUNT)\n            unsigned long r;\n            _BitScanForward(&r, (U32)val);\n            return (unsigned)r >> 3;\n#elif (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) ||                                \\\n                                                    ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \\\n    !defined(__TINYC__) && !defined(LZ4_FORCE_SW_BITCOUNT)\n            return (unsigned)__builtin_ctz((U32)val) >> 3;\n#else\n            const U32 m = 0x01010101;\n            return (unsigned)((((val - 1) ^ val) & (m - 1)) * m) >> 24;\n#endif\n        }\n    }\n    else /* Big Endian CPU */\n    {\n        if (sizeof(val) == 8)\n        {\n#if (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) ||                                \\\n                                                  ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \\\n    !defined(__TINYC__) && !defined(LZ4_FORCE_SW_BITCOUNT)\n            return (unsigned)__builtin_clzll((U64)val) >> 3;\n#else\n#if 1\n            /* this method is probably faster,\n             * but adds a 128 bytes lookup table */\n            static const unsigned char ctz7_tab[128] = {\n                7,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                4,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                5,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                4,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                6,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                4,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                5,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                4,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n                3,\n                0,\n                1,\n                0,\n                2,\n                0,\n                1,\n                0,\n            };\n            U64 const mask = 0x0101010101010101ULL;\n            U64 const t = (((val >> 8) - mask) | val) & mask;\n            return ctz7_tab[(t * 0x0080402010080402ULL) >> 57];\n#else\n            /* this method doesn't consume memory space like the previous one,\n             * but it contains several branches,\n             * that may end up slowing execution */\n            static const U32 by32 = sizeof(val) * 4; /* 32 on 64 bits (goal), 16 on 32 bits.\n             Just to avoid some static analyzer complaining about shift by 32 on 32-bits target.\n             Note that this code path is never triggered in 32-bits mode. */\n            unsigned r;\n            if (!(val >> by32))\n            {\n                r = 4;\n            }\n            else\n            {\n                r = 0;\n                val >>= by32;\n            }\n            if (!(val >> 16))\n            {\n                r += 2;\n                val >>= 8;\n            }\n            else\n            {\n                val >>= 24;\n            }\n            r += (!val);\n            return r;\n#endif\n#endif\n        }\n        else /* 32 bits */\n        {\n#if (defined(__clang__) || (defined(__GNUC__) && ((__GNUC__ > 3) ||                                \\\n                                                  ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))))) && \\\n    !defined(LZ4_FORCE_SW_BITCOUNT)\n            return (unsigned)__builtin_clz((U32)val) >> 3;\n#else\n            val >>= 8;\n            val = ((((val + 0x00FFFF00) | 0x00FFFFFF) + val) |\n                   (val + 0x00FF0000)) >>\n                  24;\n            return (unsigned)val ^ 3;\n#endif\n        }\n    }\n}\n\n#define STEPSIZE sizeof(reg_t)\nLZ4_FORCE_INLINE\nunsigned LZ4_count(const BYTE *pIn, const BYTE *pMatch, const BYTE *pInLimit)\n{\n    const BYTE *const pStart = pIn;\n\n    if (likely(pIn < pInLimit - (STEPSIZE - 1)))\n    {\n        reg_t const diff = LZ4_read_ARCH(pMatch) ^ LZ4_read_ARCH(pIn);\n        if (!diff)\n        {\n            pIn += STEPSIZE;\n            pMatch += STEPSIZE;\n        }\n        else\n        {\n            return LZ4_NbCommonBytes(diff);\n        }\n    }\n\n    while (likely(pIn < pInLimit - (STEPSIZE - 1)))\n    {\n        reg_t const diff = LZ4_read_ARCH(pMatch) ^ LZ4_read_ARCH(pIn);\n        if (!diff)\n        {\n            pIn += STEPSIZE;\n            pMatch += STEPSIZE;\n            continue;\n        }\n        pIn += LZ4_NbCommonBytes(diff);\n        return (unsigned)(pIn - pStart);\n    }\n\n    if ((STEPSIZE == 8) && (pIn < (pInLimit - 3)) && (LZ4_read32(pMatch) == LZ4_read32(pIn)))\n    {\n        pIn += 4;\n        pMatch += 4;\n    }\n    if ((pIn < (pInLimit - 1)) && (LZ4_read16(pMatch) == LZ4_read16(pIn)))\n    {\n        pIn += 2;\n        pMatch += 2;\n    }\n    if ((pIn < pInLimit) && (*pMatch == *pIn))\n        pIn++;\n    return (unsigned)(pIn - pStart);\n}\n\n#ifndef LZ4_COMMONDEFS_ONLY\n/*-************************************\n *  Local Constants\n **************************************/\nstatic const int LZ4_64Klimit = ((64 KB) + (MFLIMIT - 1));\nstatic const U32 LZ4_skipTrigger = 6; /* Increase this value ==> compression run slower on incompressible data */\n\n/*-************************************\n *  Local Structures and types\n **************************************/\ntypedef enum\n{\n    clearedTable = 0,\n    byPtr,\n    byU32,\n    byU16\n} tableType_t;\n\n/**\n * This enum distinguishes several different modes of accessing previous\n * content in the stream.\n *\n * - noDict        : There is no preceding content.\n * - withPrefix64k : Table entries up to ctx->dictSize before the current blob\n *                   blob being compressed are valid and refer to the preceding\n *                   content (of length ctx->dictSize), which is available\n *                   contiguously preceding in memory the content currently\n *                   being compressed.\n * - usingExtDict  : Like withPrefix64k, but the preceding content is somewhere\n *                   else in memory, starting at ctx->dictionary with length\n *                   ctx->dictSize.\n * - usingDictCtx  : Everything concerning the preceding content is\n *                   in a separate context, pointed to by ctx->dictCtx.\n *                   ctx->dictionary, ctx->dictSize, and table entries\n *                   in the current context that refer to positions\n *                   preceding the beginning of the current compression are\n *                   ignored. Instead, ctx->dictCtx->dictionary and ctx->dictCtx\n *                   ->dictSize describe the location and size of the preceding\n *                   content, and matches are found by looking in the ctx\n *                   ->dictCtx->hashTable.\n */\ntypedef enum\n{\n    noDict = 0,\n    withPrefix64k,\n    usingExtDict,\n    usingDictCtx\n} dict_directive;\ntypedef enum\n{\n    noDictIssue = 0,\n    dictSmall\n} dictIssue_directive;\n\n/*-************************************\n *  Local Utils\n **************************************/\nint LZ4_versionNumber(void) { return LZ4_VERSION_NUMBER; }\nconst char *LZ4_versionString(void) { return LZ4_VERSION_STRING; }\nint LZ4_compressBound(int isize) { return LZ4_COMPRESSBOUND(isize); }\nint LZ4_sizeofState(void) { return LZ4_STREAMSIZE; }\n\n/*-****************************************\n *  Internal Definitions, used only in Tests\n *******************************************/\n#if defined(__cplusplus)\nextern \"C\"\n{\n#endif\n\n    int LZ4_compress_forceExtDict(LZ4_stream_t *LZ4_dict, const char *source, char *dest, int srcSize);\n\n    int LZ4_decompress_safe_forceExtDict(const char *source, char *dest,\n                                         int compressedSize, int maxOutputSize,\n                                         const void *dictStart, size_t dictSize);\n    int LZ4_decompress_safe_partial_forceExtDict(const char *source, char *dest,\n                                                 int compressedSize, int targetOutputSize, int dstCapacity,\n                                                 const void *dictStart, size_t dictSize);\n#if defined(__cplusplus)\n}\n#endif\n\n/*-******************************\n *  Compression functions\n ********************************/\nLZ4_FORCE_INLINE U32 LZ4_hash4(U32 sequence, tableType_t const tableType)\n{\n    if (tableType == byU16)\n        return ((sequence * 2654435761U) >> ((MINMATCH * 8) - (LZ4_HASHLOG + 1)));\n    else\n        return ((sequence * 2654435761U) >> ((MINMATCH * 8) - LZ4_HASHLOG));\n}\n\nLZ4_FORCE_INLINE U32 LZ4_hash5(U64 sequence, tableType_t const tableType)\n{\n    const U32 hashLog = (tableType == byU16) ? LZ4_HASHLOG + 1 : LZ4_HASHLOG;\n    if (LZ4_isLittleEndian())\n    {\n        const U64 prime5bytes = 889523592379ULL;\n        return (U32)(((sequence << 24) * prime5bytes) >> (64 - hashLog));\n    }\n    else\n    {\n        const U64 prime8bytes = 11400714785074694791ULL;\n        return (U32)(((sequence >> 24) * prime8bytes) >> (64 - hashLog));\n    }\n}\n\nLZ4_FORCE_INLINE U32 LZ4_hashPosition(const void *const p, tableType_t const tableType)\n{\n    if ((sizeof(reg_t) == 8) && (tableType != byU16))\n        return LZ4_hash5(LZ4_read_ARCH(p), tableType);\n    return LZ4_hash4(LZ4_read32(p), tableType);\n}\n\nLZ4_FORCE_INLINE void LZ4_clearHash(U32 h, void *tableBase, tableType_t const tableType)\n{\n    switch (tableType)\n    {\n    default: /* fallthrough */\n    case clearedTable:\n    { /* illegal! */\n        assert(0);\n        return;\n    }\n    case byPtr:\n    {\n        const BYTE **hashTable = (const BYTE **)tableBase;\n        hashTable[h] = NULL;\n        return;\n    }\n    case byU32:\n    {\n        U32 *hashTable = (U32 *)tableBase;\n        hashTable[h] = 0;\n        return;\n    }\n    case byU16:\n    {\n        U16 *hashTable = (U16 *)tableBase;\n        hashTable[h] = 0;\n        return;\n    }\n    }\n}\n\nLZ4_FORCE_INLINE void LZ4_putIndexOnHash(U32 idx, U32 h, void *tableBase, tableType_t const tableType)\n{\n    switch (tableType)\n    {\n    default:           /* fallthrough */\n    case clearedTable: /* fallthrough */\n    case byPtr:\n    { /* illegal! */\n        assert(0);\n        return;\n    }\n    case byU32:\n    {\n        U32 *hashTable = (U32 *)tableBase;\n        hashTable[h] = idx;\n        return;\n    }\n    case byU16:\n    {\n        U16 *hashTable = (U16 *)tableBase;\n        assert(idx < 65536);\n        hashTable[h] = (U16)idx;\n        return;\n    }\n    }\n}\n\nLZ4_FORCE_INLINE void LZ4_putPositionOnHash(const BYTE *p, U32 h,\n                                            void *tableBase, tableType_t const tableType,\n                                            const BYTE *srcBase)\n{\n    switch (tableType)\n    {\n    case clearedTable:\n    { /* illegal! */\n        assert(0);\n        return;\n    }\n    case byPtr:\n    {\n        const BYTE **hashTable = (const BYTE **)tableBase;\n        hashTable[h] = p;\n        return;\n    }\n    case byU32:\n    {\n        U32 *hashTable = (U32 *)tableBase;\n        hashTable[h] = (U32)(p - srcBase);\n        return;\n    }\n    case byU16:\n    {\n        U16 *hashTable = (U16 *)tableBase;\n        hashTable[h] = (U16)(p - srcBase);\n        return;\n    }\n    }\n}\n\nLZ4_FORCE_INLINE void LZ4_putPosition(const BYTE *p, void *tableBase, tableType_t tableType, const BYTE *srcBase)\n{\n    U32 const h = LZ4_hashPosition(p, tableType);\n    LZ4_putPositionOnHash(p, h, tableBase, tableType, srcBase);\n}\n\n/* LZ4_getIndexOnHash() :\n * Index of match position registered in hash table.\n * hash position must be calculated by using base+index, or dictBase+index.\n * Assumption 1 : only valid if tableType == byU32 or byU16.\n * Assumption 2 : h is presumed valid (within limits of hash table)\n */\nLZ4_FORCE_INLINE U32 LZ4_getIndexOnHash(U32 h, const void *tableBase, tableType_t tableType)\n{\n    LZ4_STATIC_ASSERT(LZ4_MEMORY_USAGE > 2);\n    if (tableType == byU32)\n    {\n        const U32 *const hashTable = (const U32 *)tableBase;\n        assert(h < (1U << (LZ4_MEMORY_USAGE - 2)));\n        return hashTable[h];\n    }\n    if (tableType == byU16)\n    {\n        const U16 *const hashTable = (const U16 *)tableBase;\n        assert(h < (1U << (LZ4_MEMORY_USAGE - 1)));\n        return hashTable[h];\n    }\n    assert(0);\n    return 0; /* forbidden case */\n}\n\nstatic const BYTE *LZ4_getPositionOnHash(U32 h, const void *tableBase, tableType_t tableType, const BYTE *srcBase)\n{\n    if (tableType == byPtr)\n    {\n        const BYTE *const *hashTable = (const BYTE *const *)tableBase;\n        return hashTable[h];\n    }\n    if (tableType == byU32)\n    {\n        const U32 *const hashTable = (const U32 *)tableBase;\n        return hashTable[h] + srcBase;\n    }\n    {\n        const U16 *const hashTable = (const U16 *)tableBase;\n        return hashTable[h] + srcBase;\n    } /* default, to ensure a return */\n}\n\nLZ4_FORCE_INLINE const BYTE *\nLZ4_getPosition(const BYTE *p,\n                const void *tableBase, tableType_t tableType,\n                const BYTE *srcBase)\n{\n    U32 const h = LZ4_hashPosition(p, tableType);\n    return LZ4_getPositionOnHash(h, tableBase, tableType, srcBase);\n}\n\nLZ4_FORCE_INLINE void\nLZ4_prepareTable(LZ4_stream_t_internal *const cctx,\n                 const int inputSize,\n                 const tableType_t tableType)\n{\n    /* If the table hasn't been used, it's guaranteed to be zeroed out, and is\n     * therefore safe to use no matter what mode we're in. Otherwise, we figure\n     * out if it's safe to leave as is or whether it needs to be reset.\n     */\n    if ((tableType_t)cctx->tableType != clearedTable)\n    {\n        assert(inputSize >= 0);\n        if ((tableType_t)cctx->tableType != tableType || ((tableType == byU16) && cctx->currentOffset + (unsigned)inputSize >= 0xFFFFU) || ((tableType == byU32) && cctx->currentOffset > 1 GB) || tableType == byPtr || inputSize >= 4 KB)\n        {\n            DEBUGLOG(4, \"LZ4_prepareTable: Resetting table in %p\", cctx);\n            MEM_INIT(cctx->hashTable, 0, LZ4_HASHTABLESIZE);\n            cctx->currentOffset = 0;\n            cctx->tableType = (U32)clearedTable;\n        }\n        else\n        {\n            DEBUGLOG(4, \"LZ4_prepareTable: Re-use hash table (no reset)\");\n        }\n    }\n\n    /* Adding a gap, so all previous entries are > LZ4_DISTANCE_MAX back,\n     * is faster than compressing without a gap.\n     * However, compressing with currentOffset == 0 is faster still,\n     * so we preserve that case.\n     */\n    if (cctx->currentOffset != 0 && tableType == byU32)\n    {\n        DEBUGLOG(5, \"LZ4_prepareTable: adding 64KB to currentOffset\");\n        cctx->currentOffset += 64 KB;\n    }\n\n    /* Finally, clear history */\n    cctx->dictCtx = NULL;\n    cctx->dictionary = NULL;\n    cctx->dictSize = 0;\n}\n\n/** LZ4_compress_generic() :\n *  inlined, to ensure branches are decided at compilation time.\n *  Presumed already validated at this stage:\n *  - source != NULL\n *  - inputSize > 0\n */\nLZ4_FORCE_INLINE int LZ4_compress_generic_validated(\n    LZ4_stream_t_internal *const cctx,\n    const char *const source,\n    char *const dest,\n    const int inputSize,\n    int *inputConsumed, /* only written when outputDirective == fillOutput */\n    const int maxOutputSize,\n    const limitedOutput_directive outputDirective,\n    const tableType_t tableType,\n    const dict_directive dictDirective,\n    const dictIssue_directive dictIssue,\n    const int acceleration)\n{\n    int result;\n    const BYTE *ip = (const BYTE *)source;\n\n    U32 const startIndex = cctx->currentOffset;\n    const BYTE *base = (const BYTE *)source - startIndex;\n    const BYTE *lowLimit;\n\n    const LZ4_stream_t_internal *dictCtx = (const LZ4_stream_t_internal *)cctx->dictCtx;\n    const BYTE *const dictionary =\n        dictDirective == usingDictCtx ? dictCtx->dictionary : cctx->dictionary;\n    const U32 dictSize =\n        dictDirective == usingDictCtx ? dictCtx->dictSize : cctx->dictSize;\n    const U32 dictDelta = (dictDirective == usingDictCtx) ? startIndex - dictCtx->currentOffset : 0; /* make indexes in dictCtx comparable with index in current context */\n\n    int const maybe_extMem = (dictDirective == usingExtDict) || (dictDirective == usingDictCtx);\n    U32 const prefixIdxLimit = startIndex - dictSize; /* used when dictDirective == dictSmall */\n    const BYTE *const dictEnd = dictionary ? dictionary + dictSize : dictionary;\n    const BYTE *anchor = (const BYTE *)source;\n    const BYTE *const iend = ip + inputSize;\n    const BYTE *const mflimitPlusOne = iend - MFLIMIT + 1;\n    const BYTE *const matchlimit = iend - LASTLITERALS;\n\n    /* the dictCtx currentOffset is indexed on the start of the dictionary,\n     * while a dictionary in the current context precedes the currentOffset */\n    const BYTE *dictBase = (dictionary == NULL) ? NULL : (dictDirective == usingDictCtx) ? dictionary + dictSize - dictCtx->currentOffset\n                                                                                         : dictionary + dictSize - startIndex;\n\n    BYTE *op = (BYTE *)dest;\n    BYTE *const olimit = op + maxOutputSize;\n\n    U32 offset = 0;\n    U32 forwardH;\n\n    DEBUGLOG(5, \"LZ4_compress_generic_validated: srcSize=%i, tableType=%u\", inputSize, tableType);\n    assert(ip != NULL);\n    /* If init conditions are not met, we don't have to mark stream\n     * as having dirty context, since no action was taken yet */\n    if (outputDirective == fillOutput && maxOutputSize < 1)\n    {\n        return 0;\n    } /* Impossible to store anything */\n    if ((tableType == byU16) && (inputSize >= LZ4_64Klimit))\n    {\n        return 0;\n    } /* Size too large (not within 64K limit) */\n    if (tableType == byPtr)\n        assert(dictDirective == noDict); /* only supported use case with byPtr */\n    assert(acceleration >= 1);\n\n    lowLimit = (const BYTE *)source - (dictDirective == withPrefix64k ? dictSize : 0);\n\n    /* Update context state */\n    if (dictDirective == usingDictCtx)\n    {\n        /* Subsequent linked blocks can't use the dictionary. */\n        /* Instead, they use the block we just compressed. */\n        cctx->dictCtx = NULL;\n        cctx->dictSize = (U32)inputSize;\n    }\n    else\n    {\n        cctx->dictSize += (U32)inputSize;\n    }\n    cctx->currentOffset += (U32)inputSize;\n    cctx->tableType = (U32)tableType;\n\n    if (inputSize < LZ4_minLength)\n        goto _last_literals; /* Input too small, no compression (all literals) */\n\n    /* First Byte */\n    LZ4_putPosition(ip, cctx->hashTable, tableType, base);\n    ip++;\n    forwardH = LZ4_hashPosition(ip, tableType);\n\n    /* Main Loop */\n    for (;;)\n    {\n        const BYTE *match;\n        BYTE *token;\n        const BYTE *filledIp;\n\n        /* Find a match */\n        if (tableType == byPtr)\n        {\n            const BYTE *forwardIp = ip;\n            int step = 1;\n            int searchMatchNb = acceleration << LZ4_skipTrigger;\n            do\n            {\n                U32 const h = forwardH;\n                ip = forwardIp;\n                forwardIp += step;\n                step = (searchMatchNb++ >> LZ4_skipTrigger);\n\n                if (unlikely(forwardIp > mflimitPlusOne))\n                    goto _last_literals;\n                assert(ip < mflimitPlusOne);\n\n                match = LZ4_getPositionOnHash(h, cctx->hashTable, tableType, base);\n                forwardH = LZ4_hashPosition(forwardIp, tableType);\n                LZ4_putPositionOnHash(ip, h, cctx->hashTable, tableType, base);\n\n            } while ((match + LZ4_DISTANCE_MAX < ip) || (LZ4_read32(match) != LZ4_read32(ip)));\n        }\n        else\n        { /* byU32, byU16 */\n\n            const BYTE *forwardIp = ip;\n            int step = 1;\n            int searchMatchNb = acceleration << LZ4_skipTrigger;\n            do\n            {\n                U32 const h = forwardH;\n                U32 const current = (U32)(forwardIp - base);\n                U32 matchIndex = LZ4_getIndexOnHash(h, cctx->hashTable, tableType);\n                assert(matchIndex <= current);\n                assert(forwardIp - base < (ptrdiff_t)(2 GB - 1));\n                ip = forwardIp;\n                forwardIp += step;\n                step = (searchMatchNb++ >> LZ4_skipTrigger);\n\n                if (unlikely(forwardIp > mflimitPlusOne))\n                    goto _last_literals;\n                assert(ip < mflimitPlusOne);\n\n                if (dictDirective == usingDictCtx)\n                {\n                    if (matchIndex < startIndex)\n                    {\n                        /* there was no match, try the dictionary */\n                        assert(tableType == byU32);\n                        matchIndex = LZ4_getIndexOnHash(h, dictCtx->hashTable, byU32);\n                        match = dictBase + matchIndex;\n                        matchIndex += dictDelta; /* make dictCtx index comparable with current context */\n                        lowLimit = dictionary;\n                    }\n                    else\n                    {\n                        match = base + matchIndex;\n                        lowLimit = (const BYTE *)source;\n                    }\n                }\n                else if (dictDirective == usingExtDict)\n                {\n                    if (matchIndex < startIndex)\n                    {\n                        DEBUGLOG(7, \"extDict candidate: matchIndex=%5u  <  startIndex=%5u\", matchIndex, startIndex);\n                        assert(startIndex - matchIndex >= MINMATCH);\n                        assert(dictBase);\n                        match = dictBase + matchIndex;\n                        lowLimit = dictionary;\n                    }\n                    else\n                    {\n                        match = base + matchIndex;\n                        lowLimit = (const BYTE *)source;\n                    }\n                }\n                else\n                { /* single continuous memory segment */\n                    match = base + matchIndex;\n                }\n                forwardH = LZ4_hashPosition(forwardIp, tableType);\n                LZ4_putIndexOnHash(current, h, cctx->hashTable, tableType);\n\n                DEBUGLOG(7, \"candidate at pos=%u  (offset=%u \\n\", matchIndex, current - matchIndex);\n                if ((dictIssue == dictSmall) && (matchIndex < prefixIdxLimit))\n                {\n                    continue;\n                } /* match outside of valid area */\n                assert(matchIndex < current);\n                if (((tableType != byU16) || (LZ4_DISTANCE_MAX < LZ4_DISTANCE_ABSOLUTE_MAX)) && (matchIndex + LZ4_DISTANCE_MAX < current))\n                {\n                    continue;\n                } /* too far */\n                assert((current - matchIndex) <= LZ4_DISTANCE_MAX); /* match now expected within distance */\n\n                if (LZ4_read32(match) == LZ4_read32(ip))\n                {\n                    if (maybe_extMem)\n                        offset = current - matchIndex;\n                    break; /* match found */\n                }\n\n            } while (1);\n        }\n\n        /* Catch up */\n        filledIp = ip;\n        while (((ip > anchor) & (match > lowLimit)) && (unlikely(ip[-1] == match[-1])))\n        {\n            ip--;\n            match--;\n        }\n\n        /* Encode Literals */\n        {\n            unsigned const litLength = (unsigned)(ip - anchor);\n            token = op++;\n            if ((outputDirective == limitedOutput) && /* Check output buffer overflow */\n                (unlikely(op + litLength + (2 + 1 + LASTLITERALS) + (litLength / 255) > olimit)))\n            {\n                return 0; /* cannot compress within `dst` budget. Stored indexes in hash table are nonetheless fine */\n            }\n            if ((outputDirective == fillOutput) &&\n                (unlikely(op + (litLength + 240) / 255 /* litlen */ + litLength /* literals */ + 2 /* offset */ + 1 /* token */ + MFLIMIT - MINMATCH /* min last literals so last match is <= end - MFLIMIT */ > olimit)))\n            {\n                op--;\n                goto _last_literals;\n            }\n            if (litLength >= RUN_MASK)\n            {\n                int len = (int)(litLength - RUN_MASK);\n                *token = (RUN_MASK << ML_BITS);\n                for (; len >= 255; len -= 255)\n                    *op++ = 255;\n                *op++ = (BYTE)len;\n            }\n            else\n                *token = (BYTE)(litLength << ML_BITS);\n\n            /* Copy Literals */\n            LZ4_wildCopy8(op, anchor, op + litLength);\n            op += litLength;\n            DEBUGLOG(6, \"seq.start:%i, literals=%u, match.start:%i\",\n                     (int)(anchor - (const BYTE *)source), litLength, (int)(ip - (const BYTE *)source));\n        }\n\n    _next_match:\n        /* at this stage, the following variables must be correctly set :\n         * - ip : at start of LZ operation\n         * - match : at start of previous pattern occurrence; can be within current prefix, or within extDict\n         * - offset : if maybe_ext_memSegment==1 (constant)\n         * - lowLimit : must be == dictionary to mean \"match is within extDict\"; must be == source otherwise\n         * - token and *token : position to write 4-bits for match length; higher 4-bits for literal length supposed already written\n         */\n\n        if ((outputDirective == fillOutput) &&\n            (op + 2 /* offset */ + 1 /* token */ + MFLIMIT - MINMATCH /* min last literals so last match is <= end - MFLIMIT */ > olimit))\n        {\n            /* the match was too close to the end, rewind and go to last literals */\n            op = token;\n            goto _last_literals;\n        }\n\n        /* Encode Offset */\n        if (maybe_extMem)\n        { /* static test */\n            DEBUGLOG(6, \"             with offset=%u  (ext if > %i)\", offset, (int)(ip - (const BYTE *)source));\n            assert(offset <= LZ4_DISTANCE_MAX && offset > 0);\n            LZ4_writeLE16(op, (U16)offset);\n            op += 2;\n        }\n        else\n        {\n            DEBUGLOG(6, \"             with offset=%u  (same segment)\", (U32)(ip - match));\n            assert(ip - match <= LZ4_DISTANCE_MAX);\n            LZ4_writeLE16(op, (U16)(ip - match));\n            op += 2;\n        }\n\n        /* Encode MatchLength */\n        {\n            unsigned matchCode;\n\n            if ((dictDirective == usingExtDict || dictDirective == usingDictCtx) && (lowLimit == dictionary) /* match within extDict */)\n            {\n                const BYTE *limit = ip + (dictEnd - match);\n                assert(dictEnd > match);\n                if (limit > matchlimit)\n                    limit = matchlimit;\n                matchCode = LZ4_count(ip + MINMATCH, match + MINMATCH, limit);\n                ip += (size_t)matchCode + MINMATCH;\n                if (ip == limit)\n                {\n                    unsigned const more = LZ4_count(limit, (const BYTE *)source, matchlimit);\n                    matchCode += more;\n                    ip += more;\n                }\n                DEBUGLOG(6, \"             with matchLength=%u starting in extDict\", matchCode + MINMATCH);\n            }\n            else\n            {\n                matchCode = LZ4_count(ip + MINMATCH, match + MINMATCH, matchlimit);\n                ip += (size_t)matchCode + MINMATCH;\n                DEBUGLOG(6, \"             with matchLength=%u\", matchCode + MINMATCH);\n            }\n\n            if ((outputDirective) && /* Check output buffer overflow */\n                (unlikely(op + (1 + LASTLITERALS) + (matchCode + 240) / 255 > olimit)))\n            {\n                if (outputDirective == fillOutput)\n                {\n                    /* Match description too long : reduce it */\n                    U32 newMatchCode = 15 /* in token */ - 1 /* to avoid needing a zero byte */ + ((U32)(olimit - op) - 1 - LASTLITERALS) * 255;\n                    ip -= matchCode - newMatchCode;\n                    assert(newMatchCode < matchCode);\n                    matchCode = newMatchCode;\n                    if (unlikely(ip <= filledIp))\n                    {\n                        /* We have already filled up to filledIp so if ip ends up less than filledIp\n                         * we have positions in the hash table beyond the current position. This is\n                         * a problem if we reuse the hash table. So we have to remove these positions\n                         * from the hash table.\n                         */\n                        const BYTE *ptr;\n                        DEBUGLOG(5, \"Clearing %u positions\", (U32)(filledIp - ip));\n                        for (ptr = ip; ptr <= filledIp; ++ptr)\n                        {\n                            U32 const h = LZ4_hashPosition(ptr, tableType);\n                            LZ4_clearHash(h, cctx->hashTable, tableType);\n                        }\n                    }\n                }\n                else\n                {\n                    assert(outputDirective == limitedOutput);\n                    return 0; /* cannot compress within `dst` budget. Stored indexes in hash table are nonetheless fine */\n                }\n            }\n            if (matchCode >= ML_MASK)\n            {\n                *token += ML_MASK;\n                matchCode -= ML_MASK;\n                LZ4_write32(op, 0xFFFFFFFF);\n                while (matchCode >= 4 * 255)\n                {\n                    op += 4;\n                    LZ4_write32(op, 0xFFFFFFFF);\n                    matchCode -= 4 * 255;\n                }\n                op += matchCode / 255;\n                *op++ = (BYTE)(matchCode % 255);\n            }\n            else\n                *token += (BYTE)(matchCode);\n        }\n        /* Ensure we have enough space for the last literals. */\n        assert(!(outputDirective == fillOutput && op + 1 + LASTLITERALS > olimit));\n\n        anchor = ip;\n\n        /* Test end of chunk */\n        if (ip >= mflimitPlusOne)\n            break;\n\n        /* Fill table */\n        LZ4_putPosition(ip - 2, cctx->hashTable, tableType, base);\n\n        /* Test next position */\n        if (tableType == byPtr)\n        {\n\n            match = LZ4_getPosition(ip, cctx->hashTable, tableType, base);\n            LZ4_putPosition(ip, cctx->hashTable, tableType, base);\n            if ((match + LZ4_DISTANCE_MAX >= ip) && (LZ4_read32(match) == LZ4_read32(ip)))\n            {\n                token = op++;\n                *token = 0;\n                goto _next_match;\n            }\n        }\n        else\n        { /* byU32, byU16 */\n\n            U32 const h = LZ4_hashPosition(ip, tableType);\n            U32 const current = (U32)(ip - base);\n            U32 matchIndex = LZ4_getIndexOnHash(h, cctx->hashTable, tableType);\n            assert(matchIndex < current);\n            if (dictDirective == usingDictCtx)\n            {\n                if (matchIndex < startIndex)\n                {\n                    /* there was no match, try the dictionary */\n                    matchIndex = LZ4_getIndexOnHash(h, dictCtx->hashTable, byU32);\n                    match = dictBase + matchIndex;\n                    lowLimit = dictionary; /* required for match length counter */\n                    matchIndex += dictDelta;\n                }\n                else\n                {\n                    match = base + matchIndex;\n                    lowLimit = (const BYTE *)source; /* required for match length counter */\n                }\n            }\n            else if (dictDirective == usingExtDict)\n            {\n                if (matchIndex < startIndex)\n                {\n                    assert(dictBase);\n                    match = dictBase + matchIndex;\n                    lowLimit = dictionary; /* required for match length counter */\n                }\n                else\n                {\n                    match = base + matchIndex;\n                    lowLimit = (const BYTE *)source; /* required for match length counter */\n                }\n            }\n            else\n            { /* single memory segment */\n                match = base + matchIndex;\n            }\n            LZ4_putIndexOnHash(current, h, cctx->hashTable, tableType);\n            assert(matchIndex < current);\n            if (((dictIssue == dictSmall) ? (matchIndex >= prefixIdxLimit) : 1) && (((tableType == byU16) && (LZ4_DISTANCE_MAX == LZ4_DISTANCE_ABSOLUTE_MAX)) ? 1 : (matchIndex + LZ4_DISTANCE_MAX >= current)) && (LZ4_read32(match) == LZ4_read32(ip)))\n            {\n                token = op++;\n                *token = 0;\n                if (maybe_extMem)\n                    offset = current - matchIndex;\n                DEBUGLOG(6, \"seq.start:%i, literals=%u, match.start:%i\",\n                         (int)(anchor - (const BYTE *)source), 0, (int)(ip - (const BYTE *)source));\n                goto _next_match;\n            }\n        }\n\n        /* Prepare next loop */\n        forwardH = LZ4_hashPosition(++ip, tableType);\n    }\n\n_last_literals:\n    /* Encode Last Literals */\n    {\n        size_t lastRun = (size_t)(iend - anchor);\n        if ((outputDirective) && /* Check output buffer overflow */\n            (op + lastRun + 1 + ((lastRun + 255 - RUN_MASK) / 255) > olimit))\n        {\n            if (outputDirective == fillOutput)\n            {\n                /* adapt lastRun to fill 'dst' */\n                assert(olimit >= op);\n                lastRun = (size_t)(olimit - op) - 1 /*token*/;\n                lastRun -= (lastRun + 256 - RUN_MASK) / 256; /*additional length tokens*/\n            }\n            else\n            {\n                assert(outputDirective == limitedOutput);\n                return 0; /* cannot compress within `dst` budget. Stored indexes in hash table are nonetheless fine */\n            }\n        }\n        DEBUGLOG(6, \"Final literal run : %i literals\", (int)lastRun);\n        if (lastRun >= RUN_MASK)\n        {\n            size_t accumulator = lastRun - RUN_MASK;\n            *op++ = RUN_MASK << ML_BITS;\n            for (; accumulator >= 255; accumulator -= 255)\n                *op++ = 255;\n            *op++ = (BYTE)accumulator;\n        }\n        else\n        {\n            *op++ = (BYTE)(lastRun << ML_BITS);\n        }\n        LZ4_memcpy(op, anchor, lastRun);\n        ip = anchor + lastRun;\n        op += lastRun;\n    }\n\n    if (outputDirective == fillOutput)\n    {\n        *inputConsumed = (int)(((const char *)ip) - source);\n    }\n    result = (int)(((char *)op) - dest);\n    assert(result > 0);\n    DEBUGLOG(5, \"LZ4_compress_generic: compressed %i bytes into %i bytes\", inputSize, result);\n    return result;\n}\n\n/** LZ4_compress_generic() :\n *  inlined, to ensure branches are decided at compilation time;\n *  takes care of src == (NULL, 0)\n *  and forward the rest to LZ4_compress_generic_validated */\nLZ4_FORCE_INLINE int LZ4_compress_generic(\n    LZ4_stream_t_internal *const cctx,\n    const char *const src,\n    char *const dst,\n    const int srcSize,\n    int *inputConsumed, /* only written when outputDirective == fillOutput */\n    const int dstCapacity,\n    const limitedOutput_directive outputDirective,\n    const tableType_t tableType,\n    const dict_directive dictDirective,\n    const dictIssue_directive dictIssue,\n    const int acceleration)\n{\n    DEBUGLOG(5, \"LZ4_compress_generic: srcSize=%i, dstCapacity=%i\",\n             srcSize, dstCapacity);\n\n    if ((U32)srcSize > (U32)LZ4_MAX_INPUT_SIZE)\n    {\n        return 0;\n    } /* Unsupported srcSize, too large (or negative) */\n    if (srcSize == 0)\n    { /* src == NULL supported if srcSize == 0 */\n        if (outputDirective != notLimited && dstCapacity <= 0)\n            return 0; /* no output, can't write anything */\n        DEBUGLOG(5, \"Generating an empty block\");\n        assert(outputDirective == notLimited || dstCapacity >= 1);\n        assert(dst != NULL);\n        dst[0] = 0;\n        if (outputDirective == fillOutput)\n        {\n            assert(inputConsumed != NULL);\n            *inputConsumed = 0;\n        }\n        return 1;\n    }\n    assert(src != NULL);\n\n    return LZ4_compress_generic_validated(cctx, src, dst, srcSize,\n                                          inputConsumed, /* only written into if outputDirective == fillOutput */\n                                          dstCapacity, outputDirective,\n                                          tableType, dictDirective, dictIssue, acceleration);\n}\n\nint LZ4_compress_fast_extState(void *state, const char *source, char *dest, int inputSize, int maxOutputSize, int acceleration)\n{\n    LZ4_stream_t_internal *const ctx = &LZ4_initStream(state, sizeof(LZ4_stream_t))->internal_donotuse;\n    assert(ctx != NULL);\n    if (acceleration < 1)\n        acceleration = LZ4_ACCELERATION_DEFAULT;\n    if (acceleration > LZ4_ACCELERATION_MAX)\n        acceleration = LZ4_ACCELERATION_MAX;\n    if (maxOutputSize >= LZ4_compressBound(inputSize))\n    {\n        if (inputSize < LZ4_64Klimit)\n        {\n            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, 0, notLimited, byU16, noDict, noDictIssue, acceleration);\n        }\n        else\n        {\n            const tableType_t tableType = ((sizeof(void *) == 4) && ((uptrval)source > LZ4_DISTANCE_MAX)) ? byPtr : byU32;\n            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, 0, notLimited, tableType, noDict, noDictIssue, acceleration);\n        }\n    }\n    else\n    {\n        if (inputSize < LZ4_64Klimit)\n        {\n            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, byU16, noDict, noDictIssue, acceleration);\n        }\n        else\n        {\n            const tableType_t tableType = ((sizeof(void *) == 4) && ((uptrval)source > LZ4_DISTANCE_MAX)) ? byPtr : byU32;\n            return LZ4_compress_generic(ctx, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, noDict, noDictIssue, acceleration);\n        }\n    }\n}\n\n/**\n * LZ4_compress_fast_extState_fastReset() :\n * A variant of LZ4_compress_fast_extState().\n *\n * Using this variant avoids an expensive initialization step. It is only safe\n * to call if the state buffer is known to be correctly initialized already\n * (see comment in lz4.h on LZ4_resetStream_fast() for a definition of\n * \"correctly initialized\").\n */\nint LZ4_compress_fast_extState_fastReset(void *state, const char *src, char *dst, int srcSize, int dstCapacity, int acceleration)\n{\n    LZ4_stream_t_internal *ctx = &((LZ4_stream_t *)state)->internal_donotuse;\n    if (acceleration < 1)\n        acceleration = LZ4_ACCELERATION_DEFAULT;\n    if (acceleration > LZ4_ACCELERATION_MAX)\n        acceleration = LZ4_ACCELERATION_MAX;\n\n    if (dstCapacity >= LZ4_compressBound(srcSize))\n    {\n        if (srcSize < LZ4_64Klimit)\n        {\n            const tableType_t tableType = byU16;\n            LZ4_prepareTable(ctx, srcSize, tableType);\n            if (ctx->currentOffset)\n            {\n                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, 0, notLimited, tableType, noDict, dictSmall, acceleration);\n            }\n            else\n            {\n                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, 0, notLimited, tableType, noDict, noDictIssue, acceleration);\n            }\n        }\n        else\n        {\n            const tableType_t tableType = ((sizeof(void *) == 4) && ((uptrval)src > LZ4_DISTANCE_MAX)) ? byPtr : byU32;\n            LZ4_prepareTable(ctx, srcSize, tableType);\n            return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, 0, notLimited, tableType, noDict, noDictIssue, acceleration);\n        }\n    }\n    else\n    {\n        if (srcSize < LZ4_64Klimit)\n        {\n            const tableType_t tableType = byU16;\n            LZ4_prepareTable(ctx, srcSize, tableType);\n            if (ctx->currentOffset)\n            {\n                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, dstCapacity, limitedOutput, tableType, noDict, dictSmall, acceleration);\n            }\n            else\n            {\n                return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, dstCapacity, limitedOutput, tableType, noDict, noDictIssue, acceleration);\n            }\n        }\n        else\n        {\n            const tableType_t tableType = ((sizeof(void *) == 4) && ((uptrval)src > LZ4_DISTANCE_MAX)) ? byPtr : byU32;\n            LZ4_prepareTable(ctx, srcSize, tableType);\n            return LZ4_compress_generic(ctx, src, dst, srcSize, NULL, dstCapacity, limitedOutput, tableType, noDict, noDictIssue, acceleration);\n        }\n    }\n}\n\nint LZ4_compress_fast(const char *source, char *dest, int inputSize, int maxOutputSize, int acceleration)\n{\n    int result;\n#if (LZ4_HEAPMODE)\n    LZ4_stream_t *ctxPtr = (LZ4_stream_t *)ALLOC(sizeof(LZ4_stream_t)); /* malloc-calloc always properly aligned */\n    if (ctxPtr == NULL)\n        return 0;\n#else\n    LZ4_stream_t ctx;\n    LZ4_stream_t *const ctxPtr = &ctx;\n#endif\n    result = LZ4_compress_fast_extState(ctxPtr, source, dest, inputSize, maxOutputSize, acceleration);\n\n#if (LZ4_HEAPMODE)\n    FREEMEM(ctxPtr);\n#endif\n    return result;\n}\n\nint LZ4_compress_default(const char *src, char *dst, int srcSize, int maxOutputSize)\n{\n    return LZ4_compress_fast(src, dst, srcSize, maxOutputSize, 1);\n}\n\n/* Note!: This function leaves the stream in an unclean/broken state!\n * It is not safe to subsequently use the same state with a _fastReset() or\n * _continue() call without resetting it. */\nstatic int LZ4_compress_destSize_extState(LZ4_stream_t *state, const char *src, char *dst, int *srcSizePtr, int targetDstSize)\n{\n    void *const s = LZ4_initStream(state, sizeof(*state));\n    assert(s != NULL);\n    (void)s;\n\n    if (targetDstSize >= LZ4_compressBound(*srcSizePtr))\n    { /* compression success is guaranteed */\n        return LZ4_compress_fast_extState(state, src, dst, *srcSizePtr, targetDstSize, 1);\n    }\n    else\n    {\n        if (*srcSizePtr < LZ4_64Klimit)\n        {\n            return LZ4_compress_generic(&state->internal_donotuse, src, dst, *srcSizePtr, srcSizePtr, targetDstSize, fillOutput, byU16, noDict, noDictIssue, 1);\n        }\n        else\n        {\n            tableType_t const addrMode = ((sizeof(void *) == 4) && ((uptrval)src > LZ4_DISTANCE_MAX)) ? byPtr : byU32;\n            return LZ4_compress_generic(&state->internal_donotuse, src, dst, *srcSizePtr, srcSizePtr, targetDstSize, fillOutput, addrMode, noDict, noDictIssue, 1);\n        }\n    }\n}\n\nint LZ4_compress_destSize(const char *src, char *dst, int *srcSizePtr, int targetDstSize)\n{\n#if (LZ4_HEAPMODE)\n    LZ4_stream_t *ctx = (LZ4_stream_t *)ALLOC(sizeof(LZ4_stream_t)); /* malloc-calloc always properly aligned */\n    if (ctx == NULL)\n        return 0;\n#else\n    LZ4_stream_t ctxBody;\n    LZ4_stream_t *ctx = &ctxBody;\n#endif\n\n    int result = LZ4_compress_destSize_extState(ctx, src, dst, srcSizePtr, targetDstSize);\n\n#if (LZ4_HEAPMODE)\n    FREEMEM(ctx);\n#endif\n    return result;\n}\n\n/*-******************************\n *  Streaming functions\n ********************************/\n\nLZ4_stream_t *LZ4_createStream(void)\n{\n    LZ4_stream_t *const lz4s = (LZ4_stream_t *)ALLOC(sizeof(LZ4_stream_t));\n    LZ4_STATIC_ASSERT(LZ4_STREAMSIZE >= sizeof(LZ4_stream_t_internal)); /* A compilation error here means LZ4_STREAMSIZE is not large enough */\n    DEBUGLOG(4, \"LZ4_createStream %p\", lz4s);\n    if (lz4s == NULL)\n        return NULL;\n    LZ4_initStream(lz4s, sizeof(*lz4s));\n    return lz4s;\n}\n\nstatic size_t LZ4_stream_t_alignment(void)\n{\n#if LZ4_ALIGN_TEST\n    typedef struct\n    {\n        char c;\n        LZ4_stream_t t;\n    } t_a;\n    return sizeof(t_a) - sizeof(LZ4_stream_t);\n#else\n    return 1; /* effectively disabled */\n#endif\n}\n\nLZ4_stream_t *LZ4_initStream(void *buffer, size_t size)\n{\n    DEBUGLOG(5, \"LZ4_initStream\");\n    if (buffer == NULL)\n    {\n        return NULL;\n    }\n    if (size < sizeof(LZ4_stream_t))\n    {\n        return NULL;\n    }\n    if (!LZ4_isAligned(buffer, LZ4_stream_t_alignment()))\n        return NULL;\n    MEM_INIT(buffer, 0, sizeof(LZ4_stream_t_internal));\n    return (LZ4_stream_t *)buffer;\n}\n\n/* resetStream is now deprecated,\n * prefer initStream() which is more general */\nvoid LZ4_resetStream(LZ4_stream_t *LZ4_stream)\n{\n    DEBUGLOG(5, \"LZ4_resetStream (ctx:%p)\", LZ4_stream);\n    MEM_INIT(LZ4_stream, 0, sizeof(LZ4_stream_t_internal));\n}\n\nvoid LZ4_resetStream_fast(LZ4_stream_t *ctx)\n{\n    LZ4_prepareTable(&(ctx->internal_donotuse), 0, byU32);\n}\n\nint LZ4_freeStream(LZ4_stream_t *LZ4_stream)\n{\n    if (!LZ4_stream)\n        return 0; /* support free on NULL */\n    DEBUGLOG(5, \"LZ4_freeStream %p\", LZ4_stream);\n    FREEMEM(LZ4_stream);\n    return (0);\n}\n\n#define HASH_UNIT sizeof(reg_t)\nint LZ4_loadDict(LZ4_stream_t *LZ4_dict, const char *dictionary, int dictSize)\n{\n    LZ4_stream_t_internal *dict = &LZ4_dict->internal_donotuse;\n    const tableType_t tableType = byU32;\n    const BYTE *p = (const BYTE *)dictionary;\n    const BYTE *const dictEnd = p + dictSize;\n    const BYTE *base;\n\n    DEBUGLOG(4, \"LZ4_loadDict (%i bytes from %p into %p)\", dictSize, dictionary, LZ4_dict);\n\n    /* It's necessary to reset the context,\n     * and not just continue it with prepareTable()\n     * to avoid any risk of generating overflowing matchIndex\n     * when compressing using this dictionary */\n    LZ4_resetStream(LZ4_dict);\n\n    /* We always increment the offset by 64 KB, since, if the dict is longer,\n     * we truncate it to the last 64k, and if it's shorter, we still want to\n     * advance by a whole window length so we can provide the guarantee that\n     * there are only valid offsets in the window, which allows an optimization\n     * in LZ4_compress_fast_continue() where it uses noDictIssue even when the\n     * dictionary isn't a full 64k. */\n    dict->currentOffset += 64 KB;\n\n    if (dictSize < (int)HASH_UNIT)\n    {\n        return 0;\n    }\n\n    if ((dictEnd - p) > 64 KB)\n        p = dictEnd - 64 KB;\n    base = dictEnd - dict->currentOffset;\n    dict->dictionary = p;\n    dict->dictSize = (U32)(dictEnd - p);\n    dict->tableType = (U32)tableType;\n\n    while (p <= dictEnd - HASH_UNIT)\n    {\n        LZ4_putPosition(p, dict->hashTable, tableType, base);\n        p += 3;\n    }\n\n    return (int)dict->dictSize;\n}\n\nvoid LZ4_attach_dictionary(LZ4_stream_t *workingStream, const LZ4_stream_t *dictionaryStream)\n{\n    const LZ4_stream_t_internal *dictCtx = (dictionaryStream == NULL) ? NULL : &(dictionaryStream->internal_donotuse);\n\n    DEBUGLOG(4, \"LZ4_attach_dictionary (%p, %p, size %u)\",\n             workingStream, dictionaryStream,\n             dictCtx != NULL ? dictCtx->dictSize : 0);\n\n    if (dictCtx != NULL)\n    {\n        /* If the current offset is zero, we will never look in the\n         * external dictionary context, since there is no value a table\n         * entry can take that indicate a miss. In that case, we need\n         * to bump the offset to something non-zero.\n         */\n        if (workingStream->internal_donotuse.currentOffset == 0)\n        {\n            workingStream->internal_donotuse.currentOffset = 64 KB;\n        }\n\n        /* Don't actually attach an empty dictionary.\n         */\n        if (dictCtx->dictSize == 0)\n        {\n            dictCtx = NULL;\n        }\n    }\n    workingStream->internal_donotuse.dictCtx = dictCtx;\n}\n\nstatic void LZ4_renormDictT(LZ4_stream_t_internal *LZ4_dict, int nextSize)\n{\n    assert(nextSize >= 0);\n    if (LZ4_dict->currentOffset + (unsigned)nextSize > 0x80000000)\n    { /* potential ptrdiff_t overflow (32-bits mode) */\n        /* rescale hash table */\n        U32 const delta = LZ4_dict->currentOffset - 64 KB;\n        const BYTE *dictEnd = LZ4_dict->dictionary + LZ4_dict->dictSize;\n        int i;\n        DEBUGLOG(4, \"LZ4_renormDictT\");\n        for (i = 0; i < LZ4_HASH_SIZE_U32; i++)\n        {\n            if (LZ4_dict->hashTable[i] < delta)\n                LZ4_dict->hashTable[i] = 0;\n            else\n                LZ4_dict->hashTable[i] -= delta;\n        }\n        LZ4_dict->currentOffset = 64 KB;\n        if (LZ4_dict->dictSize > 64 KB)\n            LZ4_dict->dictSize = 64 KB;\n        LZ4_dict->dictionary = dictEnd - LZ4_dict->dictSize;\n    }\n}\n\nint LZ4_compress_fast_continue(LZ4_stream_t *LZ4_stream,\n                               const char *source, char *dest,\n                               int inputSize, int maxOutputSize,\n                               int acceleration)\n{\n    const tableType_t tableType = byU32;\n    LZ4_stream_t_internal *const streamPtr = &LZ4_stream->internal_donotuse;\n    const char *dictEnd = streamPtr->dictSize ? (const char *)streamPtr->dictionary + streamPtr->dictSize : NULL;\n\n    DEBUGLOG(5, \"LZ4_compress_fast_continue (inputSize=%i, dictSize=%u)\", inputSize, streamPtr->dictSize);\n\n    LZ4_renormDictT(streamPtr, inputSize); /* fix index overflow */\n    if (acceleration < 1)\n        acceleration = LZ4_ACCELERATION_DEFAULT;\n    if (acceleration > LZ4_ACCELERATION_MAX)\n        acceleration = LZ4_ACCELERATION_MAX;\n\n    /* invalidate tiny dictionaries */\n    if ((streamPtr->dictSize < 4)       /* tiny dictionary : not enough for a hash */\n        && (dictEnd != source)          /* prefix mode */\n        && (inputSize > 0)              /* tolerance : don't lose history, in case next invocation would use prefix mode */\n        && (streamPtr->dictCtx == NULL) /* usingDictCtx */\n    )\n    {\n        DEBUGLOG(5, \"LZ4_compress_fast_continue: dictSize(%u) at addr:%p is too small\", streamPtr->dictSize, streamPtr->dictionary);\n        /* remove dictionary existence from history, to employ faster prefix mode */\n        streamPtr->dictSize = 0;\n        streamPtr->dictionary = (const BYTE *)source;\n        dictEnd = source;\n    }\n\n    /* Check overlapping input/dictionary space */\n    {\n        const char *const sourceEnd = source + inputSize;\n        if ((sourceEnd > (const char *)streamPtr->dictionary) && (sourceEnd < dictEnd))\n        {\n            streamPtr->dictSize = (U32)(dictEnd - sourceEnd);\n            if (streamPtr->dictSize > 64 KB)\n                streamPtr->dictSize = 64 KB;\n            if (streamPtr->dictSize < 4)\n                streamPtr->dictSize = 0;\n            streamPtr->dictionary = (const BYTE *)dictEnd - streamPtr->dictSize;\n        }\n    }\n\n    /* prefix mode : source data follows dictionary */\n    if (dictEnd == source)\n    {\n        if ((streamPtr->dictSize < 64 KB) && (streamPtr->dictSize < streamPtr->currentOffset))\n            return LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, withPrefix64k, dictSmall, acceleration);\n        else\n            return LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, withPrefix64k, noDictIssue, acceleration);\n    }\n\n    /* external dictionary mode */\n    {\n        int result;\n        if (streamPtr->dictCtx)\n        {\n            /* We depend here on the fact that dictCtx'es (produced by\n             * LZ4_loadDict) guarantee that their tables contain no references\n             * to offsets between dictCtx->currentOffset - 64 KB and\n             * dictCtx->currentOffset - dictCtx->dictSize. This makes it safe\n             * to use noDictIssue even when the dict isn't a full 64 KB.\n             */\n            if (inputSize > 4 KB)\n            {\n                /* For compressing large blobs, it is faster to pay the setup\n                 * cost to copy the dictionary's tables into the active context,\n                 * so that the compression loop is only looking into one table.\n                 */\n                LZ4_memcpy(streamPtr, streamPtr->dictCtx, sizeof(*streamPtr));\n                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, usingExtDict, noDictIssue, acceleration);\n            }\n            else\n            {\n                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, usingDictCtx, noDictIssue, acceleration);\n            }\n        }\n        else\n        { /* small data <= 4 KB */\n            if ((streamPtr->dictSize < 64 KB) && (streamPtr->dictSize < streamPtr->currentOffset))\n            {\n                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, usingExtDict, dictSmall, acceleration);\n            }\n            else\n            {\n                result = LZ4_compress_generic(streamPtr, source, dest, inputSize, NULL, maxOutputSize, limitedOutput, tableType, usingExtDict, noDictIssue, acceleration);\n            }\n        }\n        streamPtr->dictionary = (const BYTE *)source;\n        streamPtr->dictSize = (U32)inputSize;\n        return result;\n    }\n}\n\n/* Hidden debug function, to force-test external dictionary mode */\nint LZ4_compress_forceExtDict(LZ4_stream_t *LZ4_dict, const char *source, char *dest, int srcSize)\n{\n    LZ4_stream_t_internal *streamPtr = &LZ4_dict->internal_donotuse;\n    int result;\n\n    LZ4_renormDictT(streamPtr, srcSize);\n\n    if ((streamPtr->dictSize < 64 KB) && (streamPtr->dictSize < streamPtr->currentOffset))\n    {\n        result = LZ4_compress_generic(streamPtr, source, dest, srcSize, NULL, 0, notLimited, byU32, usingExtDict, dictSmall, 1);\n    }\n    else\n    {\n        result = LZ4_compress_generic(streamPtr, source, dest, srcSize, NULL, 0, notLimited, byU32, usingExtDict, noDictIssue, 1);\n    }\n\n    streamPtr->dictionary = (const BYTE *)source;\n    streamPtr->dictSize = (U32)srcSize;\n\n    return result;\n}\n\n/*! LZ4_saveDict() :\n *  If previously compressed data block is not guaranteed to remain available at its memory location,\n *  save it into a safer place (char* safeBuffer).\n *  Note : no need to call LZ4_loadDict() afterwards, dictionary is immediately usable,\n *         one can therefore call LZ4_compress_fast_continue() right after.\n * @return : saved dictionary size in bytes (necessarily <= dictSize), or 0 if error.\n */\nint LZ4_saveDict(LZ4_stream_t *LZ4_dict, char *safeBuffer, int dictSize)\n{\n    LZ4_stream_t_internal *const dict = &LZ4_dict->internal_donotuse;\n\n    DEBUGLOG(5, \"LZ4_saveDict : dictSize=%i, safeBuffer=%p\", dictSize, safeBuffer);\n\n    if ((U32)dictSize > 64 KB)\n    {\n        dictSize = 64 KB;\n    } /* useless to define a dictionary > 64 KB */\n    if ((U32)dictSize > dict->dictSize)\n    {\n        dictSize = (int)dict->dictSize;\n    }\n\n    if (safeBuffer == NULL)\n        assert(dictSize == 0);\n    if (dictSize > 0)\n    {\n        const BYTE *const previousDictEnd = dict->dictionary + dict->dictSize;\n        assert(dict->dictionary);\n        memmove(safeBuffer, previousDictEnd - dictSize, dictSize);\n    }\n\n    dict->dictionary = (const BYTE *)safeBuffer;\n    dict->dictSize = (U32)dictSize;\n\n    return dictSize;\n}\n\n/*-*******************************\n *  Decompression functions\n ********************************/\n\ntypedef enum\n{\n    endOnOutputSize = 0,\n    endOnInputSize = 1\n} endCondition_directive;\ntypedef enum\n{\n    decode_full_block = 0,\n    partial_decode = 1\n} earlyEnd_directive;\n\n#undef MIN\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\n/* Read the variable-length literal or match length.\n *\n * ip - pointer to use as input.\n * lencheck - end ip.  Return an error if ip advances >= lencheck.\n * loop_check - check ip >= lencheck in body of loop.  Returns loop_error if so.\n * initial_check - check ip >= lencheck before start of loop.  Returns initial_error if so.\n * error (output) - error code.  Should be set to 0 before call.\n */\ntypedef enum\n{\n    loop_error = -2,\n    initial_error = -1,\n    ok = 0\n} variable_length_error;\nLZ4_FORCE_INLINE unsigned\nread_variable_length(const BYTE **ip, const BYTE *lencheck,\n                     int loop_check, int initial_check,\n                     variable_length_error *error)\n{\n    U32 length = 0;\n    U32 s;\n    if (initial_check && unlikely((*ip) >= lencheck))\n    { /* overflow detection */\n        *error = initial_error;\n        return length;\n    }\n    do\n    {\n        s = **ip;\n        (*ip)++;\n        length += s;\n        if (loop_check && unlikely((*ip) >= lencheck))\n        { /* overflow detection */\n            *error = loop_error;\n            return length;\n        }\n    } while (s == 255);\n\n    return length;\n}\n\n/*! LZ4_decompress_generic() :\n *  This generic decompression function covers all use cases.\n *  It shall be instantiated several times, using different sets of directives.\n *  Note that it is important for performance that this function really get inlined,\n *  in order to remove useless branches during compilation optimization.\n */\nLZ4_FORCE_INLINE int\nLZ4_decompress_generic(\n    const char *const src,\n    char *const dst,\n    int srcSize,\n    int outputSize, /* If endOnInput==endOnInputSize, this value is `dstCapacity` */\n\n    endCondition_directive endOnInput,  /* endOnOutputSize, endOnInputSize */\n    earlyEnd_directive partialDecoding, /* full, partial */\n    dict_directive dict,                /* noDict, withPrefix64k, usingExtDict */\n    const BYTE *const lowPrefix,        /* always <= dst, == dst when no prefix */\n    const BYTE *const dictStart,        /* only if dict==usingExtDict */\n    const size_t dictSize               /* note : = 0 if noDict */\n)\n{\n    if ((src == NULL) || (outputSize < 0))\n    {\n        return -1;\n    }\n\n    {\n        const BYTE *ip = (const BYTE *)src;\n        const BYTE *const iend = ip + srcSize;\n\n        BYTE *op = (BYTE *)dst;\n        BYTE *const oend = op + outputSize;\n        BYTE *cpy;\n\n        const BYTE *const dictEnd = (dictStart == NULL) ? NULL : dictStart + dictSize;\n\n        const int safeDecode = (endOnInput == endOnInputSize);\n        const int checkOffset = ((safeDecode) && (dictSize < (int)(64 KB)));\n\n        /* Set up the \"end\" pointers for the shortcut. */\n        const BYTE *const shortiend = iend - (endOnInput ? 14 : 8) /*maxLL*/ - 2 /*offset*/;\n        const BYTE *const shortoend = oend - (endOnInput ? 14 : 8) /*maxLL*/ - 18 /*maxML*/;\n\n        const BYTE *match;\n        size_t offset;\n        unsigned token;\n        size_t length;\n\n        DEBUGLOG(5, \"LZ4_decompress_generic (srcSize:%i, dstSize:%i)\", srcSize, outputSize);\n\n        /* Special cases */\n        assert(lowPrefix <= op);\n        if ((endOnInput) && (unlikely(outputSize == 0)))\n        {\n            /* Empty output buffer */\n            if (partialDecoding)\n                return 0;\n            return ((srcSize == 1) && (*ip == 0)) ? 0 : -1;\n        }\n        if ((!endOnInput) && (unlikely(outputSize == 0)))\n        {\n            return (*ip == 0 ? 1 : -1);\n        }\n        if ((endOnInput) && unlikely(srcSize == 0))\n        {\n            return -1;\n        }\n\n        /* Currently the fast loop shows a regression on qualcomm arm chips. */\n#if LZ4_FAST_DEC_LOOP\n        if ((oend - op) < FASTLOOP_SAFE_DISTANCE)\n        {\n            DEBUGLOG(6, \"skip fast decode loop\");\n            goto safe_decode;\n        }\n\n        /* Fast loop : decode sequences as long as output < iend-FASTLOOP_SAFE_DISTANCE */\n        while (1)\n        {\n            /* Main fastloop assertion: We can always wildcopy FASTLOOP_SAFE_DISTANCE */\n            assert(oend - op >= FASTLOOP_SAFE_DISTANCE);\n            if (endOnInput)\n            {\n                assert(ip < iend);\n            }\n            token = *ip++;\n            length = token >> ML_BITS; /* literal length */\n\n            assert(!endOnInput || ip <= iend); /* ip < iend before the increment */\n\n            /* decode literal length */\n            if (length == RUN_MASK)\n            {\n                variable_length_error error = ok;\n                length += read_variable_length(&ip, iend - RUN_MASK, (int)endOnInput, (int)endOnInput, &error);\n                if (error == initial_error)\n                {\n                    goto _output_error;\n                }\n                if ((safeDecode) && unlikely((uptrval)(op) + length < (uptrval)(op)))\n                {\n                    goto _output_error;\n                } /* overflow detection */\n                if ((safeDecode) && unlikely((uptrval)(ip) + length < (uptrval)(ip)))\n                {\n                    goto _output_error;\n                } /* overflow detection */\n\n                /* copy literals */\n                cpy = op + length;\n                LZ4_STATIC_ASSERT(MFLIMIT >= WILDCOPYLENGTH);\n                if (endOnInput)\n                { /* LZ4_decompress_safe() */\n                    if ((cpy > oend - 32) || (ip + length > iend - 32))\n                    {\n                        goto safe_literal_copy;\n                    }\n                    LZ4_wildCopy32(op, ip, cpy);\n                }\n                else\n                { /* LZ4_decompress_fast() */\n                    if (cpy > oend - 8)\n                    {\n                        goto safe_literal_copy;\n                    }\n                    LZ4_wildCopy8(op, ip, cpy); /* LZ4_decompress_fast() cannot copy more than 8 bytes at a time :\n                                                 * it doesn't know input length, and only relies on end-of-block properties */\n                }\n                ip += length;\n                op = cpy;\n            }\n            else\n            {\n                cpy = op + length;\n                if (endOnInput)\n                { /* LZ4_decompress_safe() */\n                    DEBUGLOG(7, \"copy %u bytes in a 16-bytes stripe\", (unsigned)length);\n                    /* We don't need to check oend, since we check it once for each loop below */\n                    if (ip > iend - (16 + 1 /*max lit + offset + nextToken*/))\n                    {\n                        goto safe_literal_copy;\n                    }\n                    /* Literals can only be 14, but hope compilers optimize if we copy by a register size */\n                    LZ4_memcpy(op, ip, 16);\n                }\n                else\n                { /* LZ4_decompress_fast() */\n                    /* LZ4_decompress_fast() cannot copy more than 8 bytes at a time :\n                     * it doesn't know input length, and relies on end-of-block properties */\n                    LZ4_memcpy(op, ip, 8);\n                    if (length > 8)\n                    {\n                        LZ4_memcpy(op + 8, ip + 8, 8);\n                    }\n                }\n                ip += length;\n                op = cpy;\n            }\n\n            /* get offset */\n            offset = LZ4_readLE16(ip);\n            ip += 2;\n            match = op - offset;\n            assert(match <= op);\n\n            /* get matchlength */\n            length = token & ML_MASK;\n\n            if (length == ML_MASK)\n            {\n                variable_length_error error = ok;\n                if ((checkOffset) && (unlikely(match + dictSize < lowPrefix)))\n                {\n                    goto _output_error;\n                } /* Error : offset outside buffers */\n                length += read_variable_length(&ip, iend - LASTLITERALS + 1, (int)endOnInput, 0, &error);\n                if (error != ok)\n                {\n                    goto _output_error;\n                }\n                if ((safeDecode) && unlikely((uptrval)(op) + length < (uptrval)op))\n                {\n                    goto _output_error;\n                } /* overflow detection */\n                length += MINMATCH;\n                if (op + length >= oend - FASTLOOP_SAFE_DISTANCE)\n                {\n                    goto safe_match_copy;\n                }\n            }\n            else\n            {\n                length += MINMATCH;\n                if (op + length >= oend - FASTLOOP_SAFE_DISTANCE)\n                {\n                    goto safe_match_copy;\n                }\n\n                /* Fastpath check: Avoids a branch in LZ4_wildCopy32 if true */\n                if ((dict == withPrefix64k) || (match >= lowPrefix))\n                {\n                    if (offset >= 8)\n                    {\n                        assert(match >= lowPrefix);\n                        assert(match <= op);\n                        assert(op + 18 <= oend);\n\n                        LZ4_memcpy(op, match, 8);\n                        LZ4_memcpy(op + 8, match + 8, 8);\n                        LZ4_memcpy(op + 16, match + 16, 2);\n                        op += length;\n                        continue;\n                    }\n                }\n            }\n\n            if (checkOffset && (unlikely(match + dictSize < lowPrefix)))\n            {\n                goto _output_error;\n            } /* Error : offset outside buffers */\n            /* match starting within external dictionary */\n            if ((dict == usingExtDict) && (match < lowPrefix))\n            {\n                if (unlikely(op + length > oend - LASTLITERALS))\n                {\n                    if (partialDecoding)\n                    {\n                        DEBUGLOG(7, \"partialDecoding: dictionary match, close to dstEnd\");\n                        length = MIN(length, (size_t)(oend - op));\n                    }\n                    else\n                    {\n                        goto _output_error; /* end-of-block condition violated */\n                    }\n                }\n\n                if (length <= (size_t)(lowPrefix - match))\n                {\n                    /* match fits entirely within external dictionary : just copy */\n                    memmove(op, dictEnd - (lowPrefix - match), length);\n                    op += length;\n                }\n                else\n                {\n                    /* match stretches into both external dictionary and current block */\n                    size_t const copySize = (size_t)(lowPrefix - match);\n                    size_t const restSize = length - copySize;\n                    LZ4_memcpy(op, dictEnd - copySize, copySize);\n                    op += copySize;\n                    if (restSize > (size_t)(op - lowPrefix))\n                    { /* overlap copy */\n                        BYTE *const endOfMatch = op + restSize;\n                        const BYTE *copyFrom = lowPrefix;\n                        while (op < endOfMatch)\n                        {\n                            *op++ = *copyFrom++;\n                        }\n                    }\n                    else\n                    {\n                        LZ4_memcpy(op, lowPrefix, restSize);\n                        op += restSize;\n                    }\n                }\n                continue;\n            }\n\n            /* copy match within block */\n            cpy = op + length;\n\n            assert((op <= oend) && (oend - op >= 32));\n            if (unlikely(offset < 16))\n            {\n                LZ4_memcpy_using_offset(op, match, cpy, offset);\n            }\n            else\n            {\n                LZ4_wildCopy32(op, match, cpy);\n            }\n\n            op = cpy; /* wildcopy correction */\n        }\n    safe_decode:\n#endif\n\n        /* Main Loop : decode remaining sequences where output < FASTLOOP_SAFE_DISTANCE */\n        while (1)\n        {\n            token = *ip++;\n            length = token >> ML_BITS; /* literal length */\n\n            assert(!endOnInput || ip <= iend); /* ip < iend before the increment */\n\n            /* A two-stage shortcut for the most common case:\n             * 1) If the literal length is 0..14, and there is enough space,\n             * enter the shortcut and copy 16 bytes on behalf of the literals\n             * (in the fast mode, only 8 bytes can be safely copied this way).\n             * 2) Further if the match length is 4..18, copy 18 bytes in a similar\n             * manner; but we ensure that there's enough space in the output for\n             * those 18 bytes earlier, upon entering the shortcut (in other words,\n             * there is a combined check for both stages).\n             */\n            if ((endOnInput ? length != RUN_MASK : length <= 8)\n                /* strictly \"less than\" on input, to re-enter the loop with at least one byte */\n                && likely((endOnInput ? ip < shortiend : 1) & (op <= shortoend)))\n            {\n                /* Copy the literals */\n                LZ4_memcpy(op, ip, endOnInput ? 16 : 8);\n                op += length;\n                ip += length;\n\n                /* The second stage: prepare for match copying, decode full info.\n                 * If it doesn't work out, the info won't be wasted. */\n                length = token & ML_MASK; /* match length */\n                offset = LZ4_readLE16(ip);\n                ip += 2;\n                match = op - offset;\n                assert(match <= op); /* check overflow */\n\n                /* Do not deal with overlapping matches. */\n                if ((length != ML_MASK) && (offset >= 8) && (dict == withPrefix64k || match >= lowPrefix))\n                {\n                    /* Copy the match. */\n                    LZ4_memcpy(op + 0, match + 0, 8);\n                    LZ4_memcpy(op + 8, match + 8, 8);\n                    LZ4_memcpy(op + 16, match + 16, 2);\n                    op += length + MINMATCH;\n                    /* Both stages worked, load the next token. */\n                    continue;\n                }\n\n                /* The second stage didn't work out, but the info is ready.\n                 * Propel it right to the point of match copying. */\n                goto _copy_match;\n            }\n\n            /* decode literal length */\n            if (length == RUN_MASK)\n            {\n                variable_length_error error = ok;\n                length += read_variable_length(&ip, iend - RUN_MASK, (int)endOnInput, (int)endOnInput, &error);\n                if (error == initial_error)\n                {\n                    goto _output_error;\n                }\n                if ((safeDecode) && unlikely((uptrval)(op) + length < (uptrval)(op)))\n                {\n                    goto _output_error;\n                } /* overflow detection */\n                if ((safeDecode) && unlikely((uptrval)(ip) + length < (uptrval)(ip)))\n                {\n                    goto _output_error;\n                } /* overflow detection */\n            }\n\n            /* copy literals */\n            cpy = op + length;\n#if LZ4_FAST_DEC_LOOP\n        safe_literal_copy:\n#endif\n            LZ4_STATIC_ASSERT(MFLIMIT >= WILDCOPYLENGTH);\n            if (((endOnInput) && ((cpy > oend - MFLIMIT) || (ip + length > iend - (2 + 1 + LASTLITERALS)))) || ((!endOnInput) && (cpy > oend - WILDCOPYLENGTH)))\n            {\n                /* We've either hit the input parsing restriction or the output parsing restriction.\n                 * In the normal scenario, decoding a full block, it must be the last sequence,\n                 * otherwise it's an error (invalid input or dimensions).\n                 * In partialDecoding scenario, it's necessary to ensure there is no buffer overflow.\n                 */\n                if (partialDecoding)\n                {\n                    /* Since we are partial decoding we may be in this block because of the output parsing\n                     * restriction, which is not valid since the output buffer is allowed to be undersized.\n                     */\n                    assert(endOnInput);\n                    DEBUGLOG(7, \"partialDecoding: copying literals, close to input or output end\")\n                    DEBUGLOG(7, \"partialDecoding: literal length = %u\", (unsigned)length);\n                    DEBUGLOG(7, \"partialDecoding: remaining space in dstBuffer : %i\", (int)(oend - op));\n                    DEBUGLOG(7, \"partialDecoding: remaining space in srcBuffer : %i\", (int)(iend - ip));\n                    /* Finishing in the middle of a literals segment,\n                     * due to lack of input.\n                     */\n                    if (ip + length > iend)\n                    {\n                        length = (size_t)(iend - ip);\n                        cpy = op + length;\n                    }\n                    /* Finishing in the middle of a literals segment,\n                     * due to lack of output space.\n                     */\n                    if (cpy > oend)\n                    {\n                        cpy = oend;\n                        assert(op <= oend);\n                        length = (size_t)(oend - op);\n                    }\n                }\n                else\n                {\n                    /* We must be on the last sequence because of the parsing limitations so check\n                     * that we exactly regenerate the original size (must be exact when !endOnInput).\n                     */\n                    if ((!endOnInput) && (cpy != oend))\n                    {\n                        goto _output_error;\n                    }\n                    /* We must be on the last sequence (or invalid) because of the parsing limitations\n                     * so check that we exactly consume the input and don't overrun the output buffer.\n                     */\n                    if ((endOnInput) && ((ip + length != iend) || (cpy > oend)))\n                    {\n                        DEBUGLOG(6, \"should have been last run of literals\")\n                        DEBUGLOG(6, \"ip(%p) + length(%i) = %p != iend (%p)\", ip, (int)length, ip + length, iend);\n                        DEBUGLOG(6, \"or cpy(%p) > oend(%p)\", cpy, oend);\n                        goto _output_error;\n                    }\n                }\n                memmove(op, ip, length); /* supports overlapping memory regions; only matters for in-place decompression scenarios */\n                ip += length;\n                op += length;\n                /* Necessarily EOF when !partialDecoding.\n                 * When partialDecoding, it is EOF if we've either\n                 * filled the output buffer or\n                 * can't proceed with reading an offset for following match.\n                 */\n                if (!partialDecoding || (cpy == oend) || (ip >= (iend - 2)))\n                {\n                    break;\n                }\n            }\n            else\n            {\n                LZ4_wildCopy8(op, ip, cpy); /* may overwrite up to WILDCOPYLENGTH beyond cpy */\n                ip += length;\n                op = cpy;\n            }\n\n            /* get offset */\n            offset = LZ4_readLE16(ip);\n            ip += 2;\n            match = op - offset;\n\n            /* get matchlength */\n            length = token & ML_MASK;\n\n        _copy_match:\n            if (length == ML_MASK)\n            {\n                variable_length_error error = ok;\n                length += read_variable_length(&ip, iend - LASTLITERALS + 1, (int)endOnInput, 0, &error);\n                if (error != ok)\n                    goto _output_error;\n                if ((safeDecode) && unlikely((uptrval)(op) + length < (uptrval)op))\n                    goto _output_error; /* overflow detection */\n            }\n            length += MINMATCH;\n\n#if LZ4_FAST_DEC_LOOP\n        safe_match_copy:\n#endif\n            if ((checkOffset) && (unlikely(match + dictSize < lowPrefix)))\n                goto _output_error; /* Error : offset outside buffers */\n            /* match starting within external dictionary */\n            if ((dict == usingExtDict) && (match < lowPrefix))\n            {\n                if (unlikely(op + length > oend - LASTLITERALS))\n                {\n                    if (partialDecoding)\n                        length = MIN(length, (size_t)(oend - op));\n                    else\n                        goto _output_error; /* doesn't respect parsing restriction */\n                }\n\n                if (length <= (size_t)(lowPrefix - match))\n                {\n                    /* match fits entirely within external dictionary : just copy */\n                    memmove(op, dictEnd - (lowPrefix - match), length);\n                    op += length;\n                }\n                else\n                {\n                    /* match stretches into both external dictionary and current block */\n                    size_t const copySize = (size_t)(lowPrefix - match);\n                    size_t const restSize = length - copySize;\n                    LZ4_memcpy(op, dictEnd - copySize, copySize);\n                    op += copySize;\n                    if (restSize > (size_t)(op - lowPrefix))\n                    { /* overlap copy */\n                        BYTE *const endOfMatch = op + restSize;\n                        const BYTE *copyFrom = lowPrefix;\n                        while (op < endOfMatch)\n                            *op++ = *copyFrom++;\n                    }\n                    else\n                    {\n                        LZ4_memcpy(op, lowPrefix, restSize);\n                        op += restSize;\n                    }\n                }\n                continue;\n            }\n            assert(match >= lowPrefix);\n\n            /* copy match within block */\n            cpy = op + length;\n\n            /* partialDecoding : may end anywhere within the block */\n            assert(op <= oend);\n            if (partialDecoding && (cpy > oend - MATCH_SAFEGUARD_DISTANCE))\n            {\n                size_t const mlen = MIN(length, (size_t)(oend - op));\n                const BYTE *const matchEnd = match + mlen;\n                BYTE *const copyEnd = op + mlen;\n                if (matchEnd > op)\n                { /* overlap copy */\n                    while (op < copyEnd)\n                    {\n                        *op++ = *match++;\n                    }\n                }\n                else\n                {\n                    LZ4_memcpy(op, match, mlen);\n                }\n                op = copyEnd;\n                if (op == oend)\n                {\n                    break;\n                }\n                continue;\n            }\n\n            if (unlikely(offset < 8))\n            {\n                LZ4_write32(op, 0); /* silence msan warning when offset==0 */\n                op[0] = match[0];\n                op[1] = match[1];\n                op[2] = match[2];\n                op[3] = match[3];\n                match += inc32table[offset];\n                LZ4_memcpy(op + 4, match, 4);\n                match -= dec64table[offset];\n            }\n            else\n            {\n                LZ4_memcpy(op, match, 8);\n                match += 8;\n            }\n            op += 8;\n\n            if (unlikely(cpy > oend - MATCH_SAFEGUARD_DISTANCE))\n            {\n                BYTE *const oCopyLimit = oend - (WILDCOPYLENGTH - 1);\n                if (cpy > oend - LASTLITERALS)\n                {\n                    goto _output_error;\n                } /* Error : last LASTLITERALS bytes must be literals (uncompressed) */\n                if (op < oCopyLimit)\n                {\n                    LZ4_wildCopy8(op, match, oCopyLimit);\n                    match += oCopyLimit - op;\n                    op = oCopyLimit;\n                }\n                while (op < cpy)\n                {\n                    *op++ = *match++;\n                }\n            }\n            else\n            {\n                LZ4_memcpy(op, match, 8);\n                if (length > 16)\n                {\n                    LZ4_wildCopy8(op + 8, match + 8, cpy);\n                }\n            }\n            op = cpy; /* wildcopy correction */\n        }\n\n        /* end of decoding */\n        if (endOnInput)\n        {\n            DEBUGLOG(5, \"decoded %i bytes\", (int)(((char *)op) - dst));\n            return (int)(((char *)op) - dst); /* Nb of output bytes decoded */\n        }\n        else\n        {\n            return (int)(((const char *)ip) - src); /* Nb of input bytes read */\n        }\n\n        /* Overflow error detected */\n    _output_error:\n        return (int)(-(((const char *)ip) - src)) - 1;\n    }\n}\n\n/*===== Instantiate the API decoding functions. =====*/\n\nLZ4_FORCE_O2\nint LZ4_decompress_safe(const char *source, char *dest, int compressedSize, int maxDecompressedSize)\n{\n    return LZ4_decompress_generic(source, dest, compressedSize, maxDecompressedSize,\n                                  endOnInputSize, decode_full_block, noDict,\n                                  (BYTE *)dest, NULL, 0);\n}\n\nLZ4_FORCE_O2\nint LZ4_decompress_safe_partial(const char *src, char *dst, int compressedSize, int targetOutputSize, int dstCapacity)\n{\n    dstCapacity = MIN(targetOutputSize, dstCapacity);\n    return LZ4_decompress_generic(src, dst, compressedSize, dstCapacity,\n                                  endOnInputSize, partial_decode,\n                                  noDict, (BYTE *)dst, NULL, 0);\n}\n\nLZ4_FORCE_O2\nint LZ4_decompress_fast(const char *source, char *dest, int originalSize)\n{\n    return LZ4_decompress_generic(source, dest, 0, originalSize,\n                                  endOnOutputSize, decode_full_block, withPrefix64k,\n                                  (BYTE *)dest - 64 KB, NULL, 0);\n}\n\n/*===== Instantiate a few more decoding cases, used more than once. =====*/\n\nLZ4_FORCE_O2 /* Exported, an obsolete API function. */\n    int\n    LZ4_decompress_safe_withPrefix64k(const char *source, char *dest, int compressedSize, int maxOutputSize)\n{\n    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,\n                                  endOnInputSize, decode_full_block, withPrefix64k,\n                                  (BYTE *)dest - 64 KB, NULL, 0);\n}\n\nLZ4_FORCE_O2\nstatic int LZ4_decompress_safe_partial_withPrefix64k(const char *source, char *dest, int compressedSize, int targetOutputSize, int dstCapacity)\n{\n    dstCapacity = MIN(targetOutputSize, dstCapacity);\n    return LZ4_decompress_generic(source, dest, compressedSize, dstCapacity,\n                                  endOnInputSize, partial_decode, withPrefix64k,\n                                  (BYTE *)dest - 64 KB, NULL, 0);\n}\n\n/* Another obsolete API function, paired with the previous one. */\nint LZ4_decompress_fast_withPrefix64k(const char *source, char *dest, int originalSize)\n{\n    /* LZ4_decompress_fast doesn't validate match offsets,\n     * and thus serves well with any prefixed dictionary. */\n    return LZ4_decompress_fast(source, dest, originalSize);\n}\n\nLZ4_FORCE_O2\nstatic int LZ4_decompress_safe_withSmallPrefix(const char *source, char *dest, int compressedSize, int maxOutputSize,\n                                               size_t prefixSize)\n{\n    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,\n                                  endOnInputSize, decode_full_block, noDict,\n                                  (BYTE *)dest - prefixSize, NULL, 0);\n}\n\nLZ4_FORCE_O2\nstatic int LZ4_decompress_safe_partial_withSmallPrefix(const char *source, char *dest, int compressedSize, int targetOutputSize, int dstCapacity,\n                                                       size_t prefixSize)\n{\n    dstCapacity = MIN(targetOutputSize, dstCapacity);\n    return LZ4_decompress_generic(source, dest, compressedSize, dstCapacity,\n                                  endOnInputSize, partial_decode, noDict,\n                                  (BYTE *)dest - prefixSize, NULL, 0);\n}\n\nLZ4_FORCE_O2\nint LZ4_decompress_safe_forceExtDict(const char *source, char *dest,\n                                     int compressedSize, int maxOutputSize,\n                                     const void *dictStart, size_t dictSize)\n{\n    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,\n                                  endOnInputSize, decode_full_block, usingExtDict,\n                                  (BYTE *)dest, (const BYTE *)dictStart, dictSize);\n}\n\nLZ4_FORCE_O2\nint LZ4_decompress_safe_partial_forceExtDict(const char *source, char *dest,\n                                             int compressedSize, int targetOutputSize, int dstCapacity,\n                                             const void *dictStart, size_t dictSize)\n{\n    dstCapacity = MIN(targetOutputSize, dstCapacity);\n    return LZ4_decompress_generic(source, dest, compressedSize, dstCapacity,\n                                  endOnInputSize, partial_decode, usingExtDict,\n                                  (BYTE *)dest, (const BYTE *)dictStart, dictSize);\n}\n\nLZ4_FORCE_O2\nstatic int LZ4_decompress_fast_extDict(const char *source, char *dest, int originalSize,\n                                       const void *dictStart, size_t dictSize)\n{\n    return LZ4_decompress_generic(source, dest, 0, originalSize,\n                                  endOnOutputSize, decode_full_block, usingExtDict,\n                                  (BYTE *)dest, (const BYTE *)dictStart, dictSize);\n}\n\n/* The \"double dictionary\" mode, for use with e.g. ring buffers: the first part\n * of the dictionary is passed as prefix, and the second via dictStart + dictSize.\n * These routines are used only once, in LZ4_decompress_*_continue().\n */\nLZ4_FORCE_INLINE\nint LZ4_decompress_safe_doubleDict(const char *source, char *dest, int compressedSize, int maxOutputSize,\n                                   size_t prefixSize, const void *dictStart, size_t dictSize)\n{\n    return LZ4_decompress_generic(source, dest, compressedSize, maxOutputSize,\n                                  endOnInputSize, decode_full_block, usingExtDict,\n                                  (BYTE *)dest - prefixSize, (const BYTE *)dictStart, dictSize);\n}\n\nLZ4_FORCE_INLINE\nint LZ4_decompress_fast_doubleDict(const char *source, char *dest, int originalSize,\n                                   size_t prefixSize, const void *dictStart, size_t dictSize)\n{\n    return LZ4_decompress_generic(source, dest, 0, originalSize,\n                                  endOnOutputSize, decode_full_block, usingExtDict,\n                                  (BYTE *)dest - prefixSize, (const BYTE *)dictStart, dictSize);\n}\n\n/*===== streaming decompression functions =====*/\n\nLZ4_streamDecode_t *LZ4_createStreamDecode(void)\n{\n    LZ4_streamDecode_t *lz4s = (LZ4_streamDecode_t *)ALLOC_AND_ZERO(sizeof(LZ4_streamDecode_t));\n    LZ4_STATIC_ASSERT(LZ4_STREAMDECODESIZE >= sizeof(LZ4_streamDecode_t_internal)); /* A compilation error here means LZ4_STREAMDECODESIZE is not large enough */\n    return lz4s;\n}\n\nint LZ4_freeStreamDecode(LZ4_streamDecode_t *LZ4_stream)\n{\n    if (LZ4_stream == NULL)\n    {\n        return 0;\n    } /* support free on NULL */\n    FREEMEM(LZ4_stream);\n    return 0;\n}\n\n/*! LZ4_setStreamDecode() :\n *  Use this function to instruct where to find the dictionary.\n *  This function is not necessary if previous data is still available where it was decoded.\n *  Loading a size of 0 is allowed (same effect as no dictionary).\n * @return : 1 if OK, 0 if error\n */\nint LZ4_setStreamDecode(LZ4_streamDecode_t *LZ4_streamDecode, const char *dictionary, int dictSize)\n{\n    LZ4_streamDecode_t_internal *lz4sd = &LZ4_streamDecode->internal_donotuse;\n    lz4sd->prefixSize = (size_t)dictSize;\n    if (dictSize)\n    {\n        assert(dictionary != NULL);\n        lz4sd->prefixEnd = (const BYTE *)dictionary + dictSize;\n    }\n    else\n    {\n        lz4sd->prefixEnd = (const BYTE *)dictionary;\n    }\n    lz4sd->externalDict = NULL;\n    lz4sd->extDictSize = 0;\n    return 1;\n}\n\n/*! LZ4_decoderRingBufferSize() :\n *  when setting a ring buffer for streaming decompression (optional scenario),\n *  provides the minimum size of this ring buffer\n *  to be compatible with any source respecting maxBlockSize condition.\n *  Note : in a ring buffer scenario,\n *  blocks are presumed decompressed next to each other.\n *  When not enough space remains for next block (remainingSize < maxBlockSize),\n *  decoding resumes from beginning of ring buffer.\n * @return : minimum ring buffer size,\n *           or 0 if there is an error (invalid maxBlockSize).\n */\nint LZ4_decoderRingBufferSize(int maxBlockSize)\n{\n    if (maxBlockSize < 0)\n        return 0;\n    if (maxBlockSize > LZ4_MAX_INPUT_SIZE)\n        return 0;\n    if (maxBlockSize < 16)\n        maxBlockSize = 16;\n    return LZ4_DECODER_RING_BUFFER_SIZE(maxBlockSize);\n}\n\n/*\n*_continue() :\n    These decoding functions allow decompression of multiple blocks in \"streaming\" mode.\n    Previously decoded blocks must still be available at the memory position where they were decoded.\n    If it's not possible, save the relevant part of decoded data into a safe buffer,\n    and indicate where it stands using LZ4_setStreamDecode()\n*/\nLZ4_FORCE_O2\nint LZ4_decompress_safe_continue(LZ4_streamDecode_t *LZ4_streamDecode, const char *source, char *dest, int compressedSize, int maxOutputSize)\n{\n    LZ4_streamDecode_t_internal *lz4sd = &LZ4_streamDecode->internal_donotuse;\n    int result;\n\n    if (lz4sd->prefixSize == 0)\n    {\n        /* The first call, no dictionary yet. */\n        assert(lz4sd->extDictSize == 0);\n        result = LZ4_decompress_safe(source, dest, compressedSize, maxOutputSize);\n        if (result <= 0)\n            return result;\n        lz4sd->prefixSize = (size_t)result;\n        lz4sd->prefixEnd = (BYTE *)dest + result;\n    }\n    else if (lz4sd->prefixEnd == (BYTE *)dest)\n    {\n        /* They're rolling the current segment. */\n        if (lz4sd->prefixSize >= 64 KB - 1)\n            result = LZ4_decompress_safe_withPrefix64k(source, dest, compressedSize, maxOutputSize);\n        else if (lz4sd->extDictSize == 0)\n            result = LZ4_decompress_safe_withSmallPrefix(source, dest, compressedSize, maxOutputSize,\n                                                         lz4sd->prefixSize);\n        else\n            result = LZ4_decompress_safe_doubleDict(source, dest, compressedSize, maxOutputSize,\n                                                    lz4sd->prefixSize, lz4sd->externalDict, lz4sd->extDictSize);\n        if (result <= 0)\n            return result;\n        lz4sd->prefixSize += (size_t)result;\n        lz4sd->prefixEnd += result;\n    }\n    else\n    {\n        /* The buffer wraps around, or they're switching to another buffer. */\n        lz4sd->extDictSize = lz4sd->prefixSize;\n        lz4sd->externalDict = lz4sd->prefixEnd - lz4sd->extDictSize;\n        result = LZ4_decompress_safe_forceExtDict(source, dest, compressedSize, maxOutputSize,\n                                                  lz4sd->externalDict, lz4sd->extDictSize);\n        if (result <= 0)\n            return result;\n        lz4sd->prefixSize = (size_t)result;\n        lz4sd->prefixEnd = (BYTE *)dest + result;\n    }\n\n    return result;\n}\n\nLZ4_FORCE_O2\nint LZ4_decompress_fast_continue(LZ4_streamDecode_t *LZ4_streamDecode, const char *source, char *dest, int originalSize)\n{\n    LZ4_streamDecode_t_internal *lz4sd = &LZ4_streamDecode->internal_donotuse;\n    int result;\n    assert(originalSize >= 0);\n\n    if (lz4sd->prefixSize == 0)\n    {\n        assert(lz4sd->extDictSize == 0);\n        result = LZ4_decompress_fast(source, dest, originalSize);\n        if (result <= 0)\n            return result;\n        lz4sd->prefixSize = (size_t)originalSize;\n        lz4sd->prefixEnd = (BYTE *)dest + originalSize;\n    }\n    else if (lz4sd->prefixEnd == (BYTE *)dest)\n    {\n        if (lz4sd->prefixSize >= 64 KB - 1 || lz4sd->extDictSize == 0)\n            result = LZ4_decompress_fast(source, dest, originalSize);\n        else\n            result = LZ4_decompress_fast_doubleDict(source, dest, originalSize,\n                                                    lz4sd->prefixSize, lz4sd->externalDict, lz4sd->extDictSize);\n        if (result <= 0)\n            return result;\n        lz4sd->prefixSize += (size_t)originalSize;\n        lz4sd->prefixEnd += originalSize;\n    }\n    else\n    {\n        lz4sd->extDictSize = lz4sd->prefixSize;\n        lz4sd->externalDict = lz4sd->prefixEnd - lz4sd->extDictSize;\n        result = LZ4_decompress_fast_extDict(source, dest, originalSize,\n                                             lz4sd->externalDict, lz4sd->extDictSize);\n        if (result <= 0)\n            return result;\n        lz4sd->prefixSize = (size_t)originalSize;\n        lz4sd->prefixEnd = (BYTE *)dest + originalSize;\n    }\n\n    return result;\n}\n\n/*\nAdvanced decoding functions :\n*_usingDict() :\n    These decoding functions work the same as \"_continue\" ones,\n    the dictionary must be explicitly provided within parameters\n*/\n\nint LZ4_decompress_safe_usingDict(const char *source, char *dest, int compressedSize, int maxOutputSize, const char *dictStart, int dictSize)\n{\n    if (dictSize == 0)\n        return LZ4_decompress_safe(source, dest, compressedSize, maxOutputSize);\n    if (dictStart + dictSize == dest)\n    {\n        if (dictSize >= 64 KB - 1)\n        {\n            return LZ4_decompress_safe_withPrefix64k(source, dest, compressedSize, maxOutputSize);\n        }\n        assert(dictSize >= 0);\n        return LZ4_decompress_safe_withSmallPrefix(source, dest, compressedSize, maxOutputSize, (size_t)dictSize);\n    }\n    assert(dictSize >= 0);\n    return LZ4_decompress_safe_forceExtDict(source, dest, compressedSize, maxOutputSize, dictStart, (size_t)dictSize);\n}\n\nint LZ4_decompress_safe_partial_usingDict(const char *source, char *dest, int compressedSize, int targetOutputSize, int dstCapacity, const char *dictStart, int dictSize)\n{\n    if (dictSize == 0)\n        return LZ4_decompress_safe_partial(source, dest, compressedSize, targetOutputSize, dstCapacity);\n    if (dictStart + dictSize == dest)\n    {\n        if (dictSize >= 64 KB - 1)\n        {\n            return LZ4_decompress_safe_partial_withPrefix64k(source, dest, compressedSize, targetOutputSize, dstCapacity);\n        }\n        assert(dictSize >= 0);\n        return LZ4_decompress_safe_partial_withSmallPrefix(source, dest, compressedSize, targetOutputSize, dstCapacity, (size_t)dictSize);\n    }\n    assert(dictSize >= 0);\n    return LZ4_decompress_safe_partial_forceExtDict(source, dest, compressedSize, targetOutputSize, dstCapacity, dictStart, (size_t)dictSize);\n}\n\nint LZ4_decompress_fast_usingDict(const char *source, char *dest, int originalSize, const char *dictStart, int dictSize)\n{\n    if (dictSize == 0 || dictStart + dictSize == dest)\n        return LZ4_decompress_fast(source, dest, originalSize);\n    assert(dictSize >= 0);\n    return LZ4_decompress_fast_extDict(source, dest, originalSize, dictStart, (size_t)dictSize);\n}\n\n/*=*************************************************\n *  Obsolete Functions\n ***************************************************/\n/* obsolete compression functions */\nint LZ4_compress_limitedOutput(const char *source, char *dest, int inputSize, int maxOutputSize)\n{\n    return LZ4_compress_default(source, dest, inputSize, maxOutputSize);\n}\nint LZ4_compress(const char *src, char *dest, int srcSize)\n{\n    return LZ4_compress_default(src, dest, srcSize, LZ4_compressBound(srcSize));\n}\nint LZ4_compress_limitedOutput_withState(void *state, const char *src, char *dst, int srcSize, int dstSize)\n{\n    return LZ4_compress_fast_extState(state, src, dst, srcSize, dstSize, 1);\n}\nint LZ4_compress_withState(void *state, const char *src, char *dst, int srcSize)\n{\n    return LZ4_compress_fast_extState(state, src, dst, srcSize, LZ4_compressBound(srcSize), 1);\n}\nint LZ4_compress_limitedOutput_continue(LZ4_stream_t *LZ4_stream, const char *src, char *dst, int srcSize, int dstCapacity)\n{\n    return LZ4_compress_fast_continue(LZ4_stream, src, dst, srcSize, dstCapacity, 1);\n}\nint LZ4_compress_continue(LZ4_stream_t *LZ4_stream, const char *source, char *dest, int inputSize)\n{\n    return LZ4_compress_fast_continue(LZ4_stream, source, dest, inputSize, LZ4_compressBound(inputSize), 1);\n}\n\n/*\nThese decompression functions are deprecated and should no longer be used.\nThey are only provided here for compatibility with older user programs.\n- LZ4_uncompress is totally equivalent to LZ4_decompress_fast\n- LZ4_uncompress_unknownOutputSize is totally equivalent to LZ4_decompress_safe\n*/\nint LZ4_uncompress(const char *source, char *dest, int outputSize)\n{\n    return LZ4_decompress_fast(source, dest, outputSize);\n}\nint LZ4_uncompress_unknownOutputSize(const char *source, char *dest, int isize, int maxOutputSize)\n{\n    return LZ4_decompress_safe(source, dest, isize, maxOutputSize);\n}\n\n/* Obsolete Streaming functions */\n\nint LZ4_sizeofStreamState(void) { return LZ4_STREAMSIZE; }\n\nint LZ4_resetStreamState(void *state, char *inputBuffer)\n{\n    (void)inputBuffer;\n    LZ4_resetStream((LZ4_stream_t *)state);\n    return 0;\n}\n\nvoid *LZ4_create(char *inputBuffer)\n{\n    (void)inputBuffer;\n    return LZ4_createStream();\n}\n\nchar *LZ4_slideInputBuffer(void *state)\n{\n    /* avoid const char * -> char * conversion warning */\n    return (char *)(uptrval)((LZ4_stream_t *)state)->internal_donotuse.dictionary;\n}\n\nvoid CompressLargeFile(const std::string &inputFilePath, const std::string &outputFilePath, int blockSize)\n{\n    // 打开输入文件\n    std::ifstream inputFile(inputFilePath, std::ios::binary);\n    if (!inputFile.is_open())\n    {\n        std::cerr << \"Unable to open input file: \" << inputFilePath << std::endl;\n        return;\n    }\n\n    // 打开输出文件\n    std::ofstream outputFile(outputFilePath, std::ios::binary);\n    if (!outputFile.is_open())\n    {\n        std::cerr << \"Unable to open output file: \" << outputFilePath << std::endl;\n        return;\n    }\n\n    std::vector<char> inputBuffer(blockSize);\n    std::vector<char> compressedBuffer(LZ4_compressBound(blockSize));\n\n    while (inputFile)\n    {\n        // 读取一个块\n        inputFile.read(inputBuffer.data(), blockSize);\n        std::streamsize bytesRead = inputFile.gcount();\n        if (bytesRead == 0)\n            break;\n\n        // 压缩块\n        int compressedSize = LZ4_compress_fast(inputBuffer.data(), compressedBuffer.data(), bytesRead, compressedBuffer.size(), 1);\n        if (compressedSize <= 0)\n        {\n            std::cerr << \"Compression failed\" << std::endl;\n            return;\n        }\n\n        // 写入压缩块大小\n        outputFile.write(reinterpret_cast<const char *>(&compressedSize), sizeof(compressedSize));\n        // 写入压缩数据\n        outputFile.write(compressedBuffer.data(), compressedSize);\n    }\n\n    inputFile.close();\n    outputFile.close();\n}\n\n#endif /* LZ4_COMMONDEFS_ONLY */\n"
        }
    ]
}